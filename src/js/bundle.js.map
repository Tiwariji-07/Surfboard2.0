{
  "version": 3,
  "sources": ["parser/wmParser.js", "context/wmContext.js", "services/openaiService.js", "services/logService.js", "ui/logPanel.js", "services/searchService.js", "ui/searchPanel.js", "ui/sidebar.js", "services/aiService.js", "completion/completionManager.js", "content.js"],
  "sourcesContent": ["/**\n * WaveMaker Markup Parser\n * Specialized parser for WaveMaker's custom markup and bindings\n */\n\nclass WMParser {\n    constructor() {\n        this.bindingPatterns = {\n            variable: /Variables\\.[^.\\s}]+(\\.dataSet)?/g,\n            widget: /Widgets\\.[^.\\s}]+/g,\n            binding: /bind:([^\"'\\s}]+)/g\n        };\n\n        this.widgetCategories = {\n            form: ['form-field', 'liveform', 'form-action'],\n            layout: ['layoutgrid', 'gridrow', 'gridcolumn'],\n            input: ['text', 'select', 'radioset', 'checkboxset', 'date', 'number'],\n            container: ['page', 'content', 'container', 'composite'],\n            navigation: ['wizard', 'wizardstep'],\n            data: ['list', 'table', 'card', 'search'],\n            display: ['label', 'message']\n        };\n    }\n\n    /**\n     * Parse WaveMaker markup and extract structure\n     * @param {string} markup - HTML string containing WaveMaker markup\n     * @returns {Object} Parsed structure with widgets, bindings, and relationships\n     */\n    parseMarkup(markup) {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(markup, 'text/html');\n        return this.parseElement(doc.body.firstElementChild);\n    }\n\n    /**\n     * Parse individual WM element\n     * @param {Element} element - DOM element to parse\n     * @returns {Object} Parsed element structure\n     */\n    parseElement(element) {\n        if (!element) return null;\n\n        const structure = {\n            type: element.tagName.toLowerCase(),\n            name: element.getAttribute('name') || '',\n            category: this.getWidgetCategory(element),\n            attributes: this.parseAttributes(element),\n            bindings: this.extractBindings(element),\n            children: [],\n            relationships: this.findRelationships(element)\n        };\n\n        // Parse children\n        for (const child of element.children) {\n            const parsedChild = this.parseElement(child);\n            if (parsedChild) {\n                structure.children.push(parsedChild);\n            }\n        }\n\n        return structure;\n    }\n\n    /**\n     * Parse element attributes\n     * @param {Element} element - DOM element\n     * @returns {Object} Parsed attributes with bindings\n     */\n    parseAttributes(element) {\n        const attrs = {};\n        for (const attr of element.attributes) {\n            attrs[attr.name] = {\n                value: attr.value,\n                hasBinding: attr.value.includes('bind:'),\n                bindings: this.extractBindingsFromValue(attr.value)\n            };\n        }\n        return attrs;\n    }\n\n    /**\n     * Extract all bindings from an element\n     * @param {Element} element - DOM element\n     * @returns {Object} Extracted bindings categorized by type\n     */\n    extractBindings(element) {\n        const html = element.outerHTML;\n        return {\n            variables: [...new Set(html.match(this.bindingPatterns.variable) || [])],\n            widgets: [...new Set(html.match(this.bindingPatterns.widget) || [])],\n            direct: [...new Set(html.match(this.bindingPatterns.binding) || [])].map(b => b.replace('bind:', ''))\n        };\n    }\n\n    /**\n     * Extract bindings from a single value\n     * @param {string} value - Attribute value\n     * @returns {Array} Extracted bindings\n     */\n    extractBindingsFromValue(value) {\n        const bindings = [];\n        if (value.includes('bind:')) {\n            const bindingValue = value.replace('bind:', '');\n            bindings.push({\n                type: 'direct',\n                value: bindingValue,\n                dependencies: this.extractDependencies(bindingValue)\n            });\n        }\n        return bindings;\n    }\n\n    /**\n     * Extract dependencies from a binding expression\n     * @param {string} expression - Binding expression\n     * @returns {Object} Extracted dependencies\n     */\n    extractDependencies(expression) {\n        return {\n            variables: [...new Set(expression.match(this.bindingPatterns.variable) || [])],\n            widgets: [...new Set(expression.match(this.bindingPatterns.widget) || [])]\n        };\n    }\n\n    /**\n     * Get widget category based on element type\n     * @param {Element} element - DOM element\n     * @returns {string} Widget category\n     */\n    getWidgetCategory(element) {\n        const tag = element.tagName.toLowerCase();\n        if (!tag.startsWith('wm-')) return 'other';\n\n        const widgetType = tag.substring(3);\n        for (const [category, types] of Object.entries(this.widgetCategories)) {\n            if (types.some(t => widgetType.includes(t))) {\n                return category;\n            }\n        }\n        return 'other';\n    }\n\n    /**\n     * Find relationships with other widgets\n     * @param {Element} element - DOM element\n     * @returns {Object} Related widgets and their relationships\n     */\n    findRelationships(element) {\n        const relationships = {\n            parent: null,\n            siblings: [],\n            dataSource: null,\n            eventHandlers: []\n        };\n\n        // Find parent relationship\n        if (element.parentElement && element.parentElement.hasAttribute('name')) {\n            relationships.parent = {\n                name: element.parentElement.getAttribute('name'),\n                type: element.parentElement.tagName.toLowerCase()\n            };\n        }\n\n        // Find data source relationships\n        const dataset = element.getAttribute('dataset');\n        if (dataset) {\n            relationships.dataSource = this.extractBindingsFromValue(dataset);\n        }\n\n        // Find event handlers\n        for (const attr of element.attributes) {\n            if (attr.name.startsWith('on-')) {\n                relationships.eventHandlers.push({\n                    event: attr.name.replace('on-', ''),\n                    handler: attr.value\n                });\n            }\n        }\n\n        return relationships;\n    }\n}\n\n// Export for use in other modules\nexport default WMParser;\n", "/**\n * WaveMaker Context Manager\n * Manages and analyzes the current WaveMaker development context\n */\n\nimport WMParser from '../parser/wmParser.js';\n\nclass WMContextManager {\n    constructor() {\n        this.parser = new WMParser();\n        this.currentContext = {\n            page: null,\n            widgets: new Map(),\n            variables: new Map(),\n            bindings: new Map(),\n            activeWidget: null\n        };\n\n        this.observers = new Set();\n    }\n\n    /**\n     * Initialize context manager and start observing DOM changes\n     */\n    async initialize() {\n        this.setupMutationObserver();\n        await this.analyzeCurrentPage();\n        console.log('Context Manager initialized');\n    }\n\n    /**\n     * Set up mutation observer to track DOM changes\n     */\n    setupMutationObserver() {\n        const observer = new MutationObserver((mutations) => {\n            for (const mutation of mutations) {\n                if (this.isWaveMakerChange(mutation)) {\n                    this.handleDOMChange(mutation);\n                }\n            }\n        });\n\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true,\n            attributes: true,\n            attributeFilter: ['class', 'style', 'data-*']\n        });\n    }\n\n    /**\n     * Check if mutation is related to WaveMaker\n     * @param {MutationRecord} mutation - DOM mutation record\n     * @returns {boolean} True if WaveMaker-related change\n     */\n    isWaveMakerChange(mutation) {\n        const target = mutation.target;\n        return target.tagName && (\n            target.tagName.toLowerCase().startsWith('wm-') ||\n            target.hasAttribute('widget-id') ||\n            target.classList.contains('wm-app')\n        );\n    }\n\n    /**\n     * Handle DOM changes\n     * @param {MutationRecord} mutation - DOM mutation record\n     */\n    async handleDOMChange(mutation) {\n        const target = mutation.target;\n        if (target.tagName && target.tagName.toLowerCase().startsWith('wm-')) {\n            const parsedElement = this.parser.parseElement(target);\n            this.updateContext(parsedElement);\n        }\n    }\n\n    /**\n     * Update the current context with new element information\n     * @param {Object} parsedElement - Parsed element data\n     */\n    updateContext(parsedElement) {\n        if (!parsedElement) return;\n\n        // Update widgets map\n        if (parsedElement.type === 'widget' && parsedElement.id) {\n            this.currentContext.widgets.set(parsedElement.id, parsedElement);\n        }\n\n        // Update variables map\n        if (parsedElement.variables) {\n            parsedElement.variables.forEach(variable => {\n                this.currentContext.variables.set(variable.name, variable);\n            });\n        }\n\n        // Update bindings map\n        if (parsedElement.bindings) {\n            parsedElement.bindings.forEach(binding => {\n                this.currentContext.bindings.set(binding.id, binding);\n            });\n        }\n\n        // Update active widget if this is the currently focused element\n        if (document.activeElement === parsedElement.element) {\n            this.currentContext.activeWidget = parsedElement;\n        }\n\n        // Notify observers of context change\n        this.notifyObservers({\n            type: 'contextUpdate',\n            element: parsedElement\n        });\n    }\n\n    /**\n     * Analyze current page structure\n     */\n    async analyzeCurrentPage() {\n        const pageElement = document.querySelector('wm-page');\n        if (!pageElement) return;\n\n        const pageStructure = this.parser.parseElement(pageElement);\n        this.currentContext.page = {\n            name: pageElement.getAttribute('name'),\n            structure: pageStructure,\n            timestamp: Date.now()\n        };\n\n        this.extractPageComponents(pageStructure);\n    }\n\n    /**\n     * Extract and categorize page components\n     * @param {Object} pageStructure - Parsed page structure\n     */\n    extractPageComponents(pageStructure) {\n        const traverse = (node) => {\n            if (node.name) {\n                // Store widget information\n                this.currentContext.widgets.set(node.name, {\n                    type: node.type,\n                    category: node.category,\n                    bindings: node.bindings,\n                    relationships: node.relationships\n                });\n\n                // Extract and store variables\n                if (node.bindings.variables.length > 0) {\n                    node.bindings.variables.forEach(variable => {\n                        if (!this.currentContext.variables.has(variable)) {\n                            this.currentContext.variables.set(variable, {\n                                usedBy: new Set([node.name]),\n                                type: this.inferVariableType(variable)\n                            });\n                        } else {\n                            this.currentContext.variables.get(variable).usedBy.add(node.name);\n                        }\n                    });\n                }\n\n                // Store binding relationships\n                node.bindings.direct.forEach(binding => {\n                    this.currentContext.bindings.set(`${node.name}:${binding}`, {\n                        widget: node.name,\n                        expression: binding,\n                        dependencies: this.parser.extractDependencies(binding)\n                    });\n                });\n            }\n\n            // Recursively process children\n            node.children.forEach(traverse);\n        };\n\n        traverse(pageStructure);\n    }\n\n    /**\n     * Infer variable type from usage\n     * @param {string} variable - Variable name\n     * @returns {string} Inferred type\n     */\n    inferVariableType(variable) {\n        if (variable.includes('.dataSet')) return 'dataset';\n        if (variable.startsWith('Variables.static')) return 'static';\n        if (variable.startsWith('Variables.sv')) return 'service';\n        return 'unknown';\n    }\n\n    /**\n     * Get relevant context for AI processing\n     * @param {string} query - User query\n     * @returns {Object} Relevant context\n     */\n    getRelevantContext(query) {\n        const context = {\n            activeWidget: this.currentContext.activeWidget,\n            relevantWidgets: [],\n            relevantVariables: [],\n            relevantBindings: []\n        };\n\n        // Find mentioned widgets\n        this.currentContext.widgets.forEach((widget, name) => {\n            if (this.isRelevantToQuery(query, name, widget)) {\n                context.relevantWidgets.push({\n                    name,\n                    ...widget\n                });\n            }\n        });\n\n        // Find related variables\n        this.currentContext.variables.forEach((variable, name) => {\n            if (this.isRelevantToQuery(query, name, variable)) {\n                context.relevantVariables.push({\n                    name,\n                    ...variable\n                });\n            }\n        });\n\n        // Find related bindings\n        context.relevantBindings = this.findRelatedBindings(context.relevantWidgets);\n\n        return context;\n    }\n\n    /**\n     * Check if item is relevant to query\n     * @param {string} query - User query\n     * @param {string} name - Item name\n     * @param {Object} item - Item details\n     * @returns {boolean} True if relevant\n     */\n    isRelevantToQuery(query, name, item) {\n        const queryTerms = query.toLowerCase().split(/\\s+/);\n        const itemTerms = name.toLowerCase().split(/[.-_]/);\n        \n        return queryTerms.some(term => \n            itemTerms.some(itemTerm => itemTerm.includes(term)) ||\n            item.type?.toLowerCase().includes(term) ||\n            item.category?.toLowerCase().includes(term)\n        );\n    }\n\n    /**\n     * Find bindings related to widgets\n     * @param {Array} widgets - Relevant widgets\n     * @returns {Array} Related bindings\n     */\n    findRelatedBindings(widgets) {\n        const bindings = [];\n        const widgetNames = new Set(widgets.map(w => w.name));\n\n        this.currentContext.bindings.forEach((binding, key) => {\n            if (widgetNames.has(binding.widget)) {\n                bindings.push({\n                    key,\n                    ...binding\n                });\n            }\n        });\n\n        return bindings;\n    }\n\n    /**\n     * Set active widget\n     * @param {string} widgetName - Name of active widget\n     */\n    setActiveWidget(widgetName) {\n        this.currentContext.activeWidget = this.currentContext.widgets.get(widgetName) || null;\n        this.notifyObservers();\n    }\n\n    /**\n     * Add context change observer\n     * @param {Function} callback - Observer callback\n     */\n    addObserver(callback) {\n        this.observers.add(callback);\n    }\n\n    /**\n     * Remove context change observer\n     * @param {Function} callback - Observer callback\n     */\n    removeObserver(callback) {\n        this.observers.delete(callback);\n    }\n\n    /**\n     * Notify observers of context changes\n     */\n    notifyObservers(change) {\n        this.observers.forEach(callback => {\n            try {\n                callback(this.currentContext, change);\n            } catch (error) {\n                console.error('Error in context observer:', error);\n            }\n        });\n    }\n}\n\nexport default WMContextManager;\n", "class OpenAIService {\n    constructor() {\n        this.apiKey = null;\n        this.baseURL = 'https://api.openai.com/v1/chat/completions';\n    }\n\n    async setApiKey(key) {\n        this.apiKey = key;\n    }\n\n    async analyzeLogs(logs) {\n        if (!this.apiKey) {\n            throw new Error('OpenAI API key not set');\n        }\n\n        const messages = [\n            {\n                role: 'system',\n                content: `You are a log analysis expert. Analyze the provided logs and:\n                1. Identify any errors, warnings, or potential issues\n                2. Suggest possible solutions or debugging steps\n                3. Highlight any performance concerns\n                4. Provide a brief summary of the system state\n                Be concise and focus on actionable insights.`\n            },\n            {\n                role: 'user',\n                content: `Please analyze these application logs:\\n\\n${logs}`\n            }\n        ];\n\n        try {\n            const response = await fetch(this.baseURL, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${this.apiKey}`\n                },\n                body: JSON.stringify({\n                    model: 'gpt-3.5-turbo',\n                    messages: messages,\n                    temperature: 0.3,\n                    max_tokens: 500\n                })\n            });\n\n            if (!response.ok) {\n                throw new Error(`OpenAI API error: ${response.statusText}`);\n            }\n\n            const data = await response.json();\n            return data.choices[0].message.content;\n        } catch (error) {\n            console.error('Error analyzing logs:', error);\n            throw error;\n        }\n    }\n}\n\nexport default new OpenAIService();\n", "import openaiService from './openaiService.js';\n\nexport class LogService {\n    constructor() {\n        this.baseUrl = 'https://www.wavemakeronline.com/studio/services/studio/logs';\n        this.authCookie = null;\n        this.openaiService = openaiService;\n        this.logs = [];\n        this.initialized = false;\n        this.setupMessageListener();\n        // this.setupConsoleMonitor();\n        this.setupNetworkMonitor();\n    }\n\n    setupMessageListener() {\n        window.addEventListener('message', (event) => {\n            if (event.data.type === 'SURFBOARD_NETWORK_ERROR') {\n                this.addLog(event.data.error);\n            }\n        });\n    }\n\n    injectNetworkMonitor() {\n        const script = document.createElement('script');\n        script.src = chrome.runtime.getURL('src/js/inject/networkMonitor.js');\n        (document.head || document.documentElement).appendChild(script);\n        script.onload = () => script.remove();\n    }\n\n    async initialize(apiKey) {\n        if (this.initialized) {\n            return;\n        }\n        this.initialized = true;\n        this.injectNetworkMonitor();\n        try {\n            // Get auth cookie from background script\n            const response = await chrome.runtime.sendMessage({ type: 'GET_AUTH_COOKIE' });\n            if (!response.cookie) {\n                throw new Error('Authentication cookie not found');\n            }\n            this.authCookie = response.cookie;\n\n            // Initialize OpenAI service\n            if (!apiKey) {\n                throw new Error('OpenAI API key is required');\n            }\n            await this.openaiService.setApiKey(apiKey);\n            \n            // console.log('LogService initialized with auth cookie and API key');\n        } catch (error) {\n            console.error('Failed to initialize LogService:', error);\n            throw error;\n        }\n    }\n\n    // setupConsoleMonitor() {\n    //     const originalConsoleError = console.error;\n    //     const originalConsoleWarn = console.warn;\n        \n    //     console.error = (...args) => {\n    //         this.addLog({\n    //             type: 'error',\n    //             severity: 'ERROR',\n    //             message: args.map(arg => \n    //                 typeof arg === 'object' ? JSON.stringify(arg) : String(arg)\n    //             ).join(' '),\n    //             timestamp: new Date().toISOString(),\n    //             source: 'console'\n    //         });\n    //         originalConsoleError.apply(console, args);\n    //     };\n\n    //     console.warn = (...args) => {\n    //         this.addLog({\n    //             type: 'warning',\n    //             severity: 'WARN',\n    //             message: args.map(arg => \n    //                 typeof arg === 'object' ? JSON.stringify(arg) : String(arg)\n    //             ).join(' '),\n    //             timestamp: new Date().toISOString(),\n    //             source: 'console'\n    //         });\n    //         originalConsoleWarn.apply(console, args);\n    //     };\n    // }\n\n    setupNetworkMonitor() {\n        // Monitor XMLHttpRequest\n        const originalXHR = window.XMLHttpRequest.prototype.open;\n        window.XMLHttpRequest.prototype.open = function(...args) {\n            const xhr = this;\n            const url = args[1];\n            \n            // Add event listeners for error handling\n            xhr.addEventListener('load', () => {\n                if (xhr.status >= 400) {\n                    console.error(`XHR Error: ${xhr.status} ${xhr.statusText}`);\n                    this.addLog({\n                        type: 'error',\n                        severity: 'ERROR',\n                        message: `XHR Error: ${xhr.status} ${xhr.statusText}`,\n                        details: {\n                            url: url,\n                            status: xhr.status,\n                            statusText: xhr.statusText,\n                            response: xhr.responseText\n                        },\n                        timestamp: new Date().toISOString(),\n                        source: 'network'\n                    });\n                }\n            });\n\n            xhr.addEventListener('error', () => {\n                console.error('XHR Network Error');\n                this.addLog({\n                    type: 'error',\n                    severity: 'ERROR',\n                    message: `XHR Network Error`,\n                    details: {\n                        url: url,\n                        error: 'Network request failed'\n                    },\n                    timestamp: new Date().toISOString(),\n                    source: 'network'\n                });\n            });\n\n            return originalXHR.apply(this, args);\n        };\n\n        // Monitor Fetch API\n        const originalFetch = window.fetch;\n        window.fetch = async (...args) => {\n            try {\n                const response = await originalFetch(...args);\n                const url = typeof args[0] === 'string' ? args[0] : args[0].url;\n                \n                if (!response.ok) {\n                    let errorDetails;\n                    try {\n                        errorDetails = await response.clone().text();\n                    } catch {\n                        errorDetails = 'Could not read response body';\n                    }\n                    console.error(`Fetch Error: ${response.status} ${response.statusText}`);\n                    this.addLog({\n                        type: 'error',\n                        severity: 'ERROR',\n                        message: `Fetch Error: ${response.status} ${response.statusText}`,\n                        details: {\n                            url: url,\n                            status: response.status,\n                            statusText: response.statusText,\n                            response: errorDetails\n                        },\n                        timestamp: new Date().toISOString(),\n                        source: 'network'\n                    });\n                }\n                return response;\n            } catch (error) {\n                const url = typeof args[0] === 'string' ? args[0] : args[0].url;\n                this.addLog({\n                    type: 'error',\n                    severity: 'ERROR',\n                    message: `Fetch Network Error: ${error.message}`,\n                    details: {\n                        url: url,\n                        error: error.message\n                    },\n                    timestamp: new Date().toISOString(),\n                    source: 'network'\n                });\n                throw error;\n            }\n        };\n    }\n\n    async fetchLogs(type = 'server', limit = 1000) {\n        try {\n            // console.log('Fetching logs of type:', type, 'with limit:', limit);\n            \n            if (!this.authCookie) {\n                // console.log('No auth cookie found, initializing...');\n                await this.initialize();\n            }\n            // console.log('Using auth cookie:', this.authCookie ? 'Present' : 'Missing');\n\n            const url = `${this.baseUrl}/${type}/${limit}`;\n            // console.log('Fetching logs from URL:', url);\n\n            const response = await fetch(url, {\n                method: 'GET',\n                credentials: 'include',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'Cookie': `auth_cookie=${this.authCookie}`\n                }\n            });\n\n            // console.log('Response status:', response.status);\n            if (!response.ok) {\n                throw new Error(`Failed to fetch ${type} logs: ${response.statusText}`);\n            }\n\n            const data = await response.json();\n            // console.log('Raw response data:', data);\n\n            if (!data || !data.result) {\n                console.warn('Invalid response format:', data);\n                throw new Error('Invalid response format from server');\n            }\n\n            const sections = await this.parseLogs(data, type);\n            // console.log('Parsed log sections:', sections);\n            return sections;\n        } catch (error) {\n            console.error('Error in fetchLogs:', error);\n            throw error;\n        }\n    }\n\n    async parseLogs(rawLogs, type = 'server') {\n        try {\n            if (!rawLogs || typeof rawLogs !== 'object') {\n                console.warn('Invalid logs response:', rawLogs);\n                return [];\n            }\n\n            if (rawLogs.result) {\n                // console.log('Raw logs result:', rawLogs.result);\n                const logLines = rawLogs.result.split('\\n').filter(line => line.trim());\n                // console.log('Filtered log lines:', logLines);\n                \n                let currentLog = null;\n                const parsedLogs = [];\n\n                // Different regex patterns for server and application logs\n                const serverLogPattern = /^(\\d{4}-\\d{2}-\\d{2}\\s+\\d{2}:\\d{2}:\\d{2},\\d{3})\\s+(\\S+)\\s+(\\w+)\\s+(\\S+)\\s+(\\S+)\\s+\\[([^\\]]+)\\](?:\\s*-\\s*(.+))?$/;\n                const appLogPattern = /^(\\d{2}\\s+\\w+\\s+\\d{4}\\s+\\d{2}:\\d{2}:\\d{2},\\d{3})\\s+(-[^\\s]*)\\s+(-[^\\s]*)\\s+(\\S+)\\s+(\\w+)\\s+\\[([^\\]]+)\\](?:\\s*-\\s*(.+))?$/;\n\n                for (const line of logLines) {\n                    // Select pattern based on log type\n                    const pattern = type === 'server' ? serverLogPattern : appLogPattern;\n                    const mainLogMatch = line.match(pattern);\n                    \n                    if (mainLogMatch) {\n                        // If we have a previous log with stack trace, add it to results\n                        if (currentLog && currentLog.stackTrace && currentLog.stackTrace.length > 0) {\n                            parsedLogs.push(currentLog);\n                        }\n\n                        if (type === 'server') {\n                            const [, timestamp, thread, level, requestId, projectPath, component, message] = mainLogMatch;\n                            currentLog = {\n                                timestamp,\n                                timeSection: timestamp.slice(0, -4), // Remove milliseconds for grouping\n                                projectPath,\n                                appId: '',\n                                thread,\n                                severity: this.getSeverity({ level, message: message || '' }),\n                                component,\n                                message: message || '',\n                                stackTrace: []\n                            };\n\n                            // Check if this log entry starts a compilation error\n                            if (message && message.includes('Error occurred while serving the request')) {\n                                currentLog.severity = 'error';\n                                continue; // Skip adding to parsedLogs, wait for stack trace\n                            }\n                        } else {\n                            const [, timestamp, projectPath, appId, thread, level, component, message] = mainLogMatch;\n                            // Convert timestamp to ISO format\n                            const date = new Date(timestamp);\n                            const isoTimestamp = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')} ${timestamp.split(' ').pop()}`;\n                            \n                            currentLog = {\n                                timestamp: isoTimestamp,\n                                timeSection: isoTimestamp.slice(0, -4),\n                                projectPath: projectPath.startsWith('-') ? projectPath.slice(1) : projectPath,\n                                appId: appId.startsWith('-') ? appId.slice(1) : appId,\n                                thread,\n                                severity: this.getSeverity({ level, message: message || '' }),\n                                component,\n                                message: message || '',\n                                stackTrace: []\n                            };\n                        }\n\n                        // Only add to parsedLogs if it's not a stack trace start\n                        if (!currentLog.message.includes('Exception:') && \n                            !currentLog.message.includes('Error:') && \n                            !currentLog.message.startsWith('Caused by:')) {\n                            parsedLogs.push(currentLog);\n                        }\n                    } else if (currentLog) {\n                        // Handle compilation errors and stack traces\n                        const line_trimmed = line.trim();\n                        \n                        if (line_trimmed.startsWith('com.wavemaker.studio.core.compiler.JavaCompilationErrorsException')) {\n                            // Start of compilation error\n                            currentLog.message = line_trimmed;\n                            currentLog.severity = 'error';\n                            currentLog.stackTrace = [line_trimmed];\n                        } else if (line_trimmed.startsWith('[{\"filename\"')) {\n                            // JSON error details for compilation error\n                            if (currentLog.stackTrace) {\n                                currentLog.stackTrace.push(line_trimmed);\n                            }\n                        } else if (line_trimmed.startsWith('at ')) {\n                            // Stack trace line\n                            if (currentLog.stackTrace) {\n                                currentLog.stackTrace.push(line_trimmed);\n                            }\n                        }\n                    } else {\n                        // If the message contains a stack trace (has newlines), split it\n                        if (line.includes('\\n')) {\n                            const lines = line.split('\\n');\n                            const message = lines[0]; // First line is the main message\n\n                            // Find the JSON line and the stack trace lines\n                            const jsonLine = lines.find(line => line.trim().startsWith('[{'));\n                            const stackLines = lines.filter(line => line.trim().startsWith('at '));\n                            \n                            if (jsonLine) {\n                                // If JSON line exists (compilation error), include it in stack trace\n                                stackTrace = [\n                                    message,\n                                    jsonLine,\n                                    ...stackLines\n                                ];\n                            } else {\n                                // Regular stack trace\n                                stackTrace = lines.filter(line => line.trim());\n                            }\n\n                            currentLog = {\n                                timestamp: '',\n                                timeSection: '',\n                                projectPath: '',\n                                appId: '',\n                                thread: '',\n                                severity: 'error',\n                                component: '',\n                                message: message || '',\n                                stackTrace\n                            };\n                        } else {\n                            currentLog = {\n                                timestamp: '',\n                                timeSection: '',\n                                projectPath: '',\n                                appId: '',\n                                thread: '',\n                                severity: 'error',\n                                component: '',\n                                message: line || '',\n                                stackTrace: []\n                            };\n                        }\n\n                        parsedLogs.push(currentLog);\n                    }\n                }\n\n                // Add the last log if it has a stack trace\n                if (currentLog && currentLog.stackTrace && currentLog.stackTrace.length > 0) {\n                    parsedLogs.push(currentLog);\n                }\n\n                // console.log('Parsed logs:', parsedLogs);\n\n                // Filter out info logs and group by time section\n                const filteredLogs = parsedLogs\n                    .filter(log => ['warn', 'error', 'debug'].includes(log.severity));\n                \n                // console.log('Filtered logs by severity:', filteredLogs);\n\n                const groupedLogs = filteredLogs.reduce((groups, log) => {\n                    const group = groups[log.timeSection] || [];\n                    group.push(log);\n                    groups[log.timeSection] = group;\n                    return groups;\n                }, {});\n\n                // console.log('Grouped logs:', groupedLogs);\n\n                // Convert to array of sections, sorted by time (newest first)\n                const sections = Object.entries(groupedLogs)\n                    .map(([timeSection, logs]) => ({\n                        timeSection,\n                        logs: logs.sort((a, b) => b.timestamp.localeCompare(a.timestamp))\n                    }))\n                    .sort((a, b) => b.timeSection.localeCompare(a.timeSection));\n\n                // console.log('Final sections:', sections);\n                return sections;\n            }\n\n            console.warn('Unexpected logs format:', rawLogs);\n            return [];\n        } catch (error) {\n            console.error('Error parsing logs:', error);\n            throw error;\n        }\n    }\n\n    getSeverity(log) {\n        // First check explicit level\n        const level = (log.level || '').toLowerCase();\n        if (level === 'error') return 'error';\n        if (level === 'warn' || level === 'warning') return 'warn';\n        if (level === 'debug') return 'debug';\n        if (level === 'info') return 'info';\n\n        // Then check message content\n        const message = (log.message || '').toLowerCase();\n        if (message.includes('error') || message.includes('exception') || message.includes('fail')) {\n            return 'error';\n        } else if (message.includes('warn') || message.includes('warning')) {\n            return 'warn';\n        } else if (message.includes('debug')) {\n            return 'debug';\n        }\n        \n        return 'info';\n    }\n\n    async analyzeBatch(logSections,isConsole=false) {\n        try {\n            console.log('Starting batch analysis:', logSections);\n            \n            // Prepare logs for analysis\n            console.log(\"Inside analyzeBatch:\");\n            let logsForAnalysis;\n            if(!isConsole){\n                    let section = logSections[0];\n                // let logsForAnalysis = logSections.flatMap(section => \n                     logsForAnalysis = section.logs.map(log => ({\n                        timestamp: log.timestamp,\n                        severity: log.severity,\n                        component: log.component,\n                        message: log.message,\n                        stackTrace: log.stackTrace,\n                        ...(log.requestId && { requestId: log.requestId }),\n                        ...(log.projectPath && { projectPath: log.projectPath }),\n                        ...(log.appId && { appId: log.appId }),\n                        thread: log.thread\n                    }))\n                // );\n\n                if (logsForAnalysis.length === 0) {\n                    return \"No logs available for analysis.\";\n                }\n\n                // Sort logs by severity and recency\n                logsForAnalysis.sort((a, b) => {\n                    // First sort by severity\n                    const severityOrder = { error: 3, warn: 2, debug: 1, info: 0 };\n                    const severityDiff = (severityOrder[b.severity] || 0) - (severityOrder[a.severity] || 0);\n                    if (severityDiff !== 0) return severityDiff;\n                    \n                    // Then by timestamp (most recent first)\n                    return b.timestamp.localeCompare(a.timestamp);\n                });\n\n                // Limit to most important logs to avoid token limit\n                // Keep more error logs than other types\n                const errorLogs = logsForAnalysis.filter(log => log.severity === 'error').slice(0, 10);\n                const warnLogs = logsForAnalysis.filter(log => log.severity === 'warn').slice(0, 5);\n                const otherLogs = logsForAnalysis.filter(log => !['error', 'warn'].includes(log.severity)).slice(0, 5);\n                \n                logsForAnalysis = [...errorLogs, ...warnLogs, ...otherLogs];\n\n                // Truncate stack traces if they're too long\n                logsForAnalysis = logsForAnalysis.map(log => ({\n                    ...log,\n                    stackTrace: log.stackTrace.length > 10 ? \n                        [...log.stackTrace.slice(0, 8), '... truncated ...', log.stackTrace[log.stackTrace.length - 1]] :\n                        log.stackTrace\n                }));\n            }else{\n                logsForAnalysis = logSections[0];\n            }\n\n            \n\n            // Create prompt for OpenAI\n            const prompt = `Analyze these logs and provide a VERY concise, human-friendly explanation:\n1. What's the problem? (1 short sentence)\n2. Where is it? (file and line number)\n3. How to fix it? (1-2 simple steps)\n\nKeep it extremely simple - imagine explaining to someone who's not technical.\n\nLogs to analyze: (${logsForAnalysis.length} most significant logs):\n${JSON.stringify(logsForAnalysis, null, 2)}`;\n\n            // console.log('Sending batch analysis request to OpenAI');\n            const aiAnalysis = await this.openaiService.analyzeLogs(prompt);\n            console.log('Received analysis from OpenAI:', aiAnalysis);\n            \n            return aiAnalysis;\n        } catch (error) {\n            console.error('Error in batch analysis:', error);\n            throw error;\n        }\n    }   \n\n    addLog(log) {\n        // Don't log requests to our own API\n        if (log.source === 'network' && \n            (log.details?.url?.includes('api.groq.com') || \n             log.details?.url?.includes('127.0.0.1'))) {\n            return;\n        }\n        \n        this.logs.push(log);\n        // Analyze the log immediately if it's an error or warning\n        if (log.severity === 'ERROR' || log.severity === 'WARN') {\n            if(this.logs.length > 0)\n            this.analyzeBatch(this.logs,true);\n        }\n    }\n}\n\n// export default LogService;\n", "import { LogService } from '../services/logService.js';\n\nclass LogPanel {\n    constructor() {\n        this.logService = new LogService();\n        this.element = document.createElement('div');\n        this.element.className = 'log-panel';\n        this.currentLogType = 'server';\n        \n        // Create DOM elements first\n        this.createHeader();\n        this.createContent();\n        this.createAnalysisPanel();\n        this.setupEventListeners();\n        \n        // Initialize the service and fetch logs\n        this.initializeService();\n    }\n\n    async initializeService() {\n        try {\n            // Get OpenAI API key\n            const apiKey = await this.getOpenAIKey();\n            if (!apiKey) {\n                console.warn('OpenAI API key not found');\n                this.showError('OpenAI API key not configured. AI analysis will not be available.');\n                return;\n            }\n\n            // Initialize service with API key\n            await this.logService.initialize(apiKey);\n            await this.refreshLogs();\n        } catch (error) {\n            console.error('Error initializing LogService:', error);\n            this.showError('Failed to initialize log service: ' + error.message);\n        }\n    }\n\n    async getOpenAIKey() {\n        return new Promise((resolve) => {\n            chrome.storage.sync.get(['openaiApiKey'], (result) => {\n                resolve(result.openaiApiKey);\n            });\n        });\n    }\n\n    \n\n    createHeader() {\n        const header = document.createElement('div');\n        header.className = 'log-header';\n\n        // Create log type selector\n        const typeSelector = document.createElement('select');\n        typeSelector.className = 'log-type-selector';\n        ['server', 'application'].forEach(type => {\n            const option = document.createElement('option');\n            option.value = type;\n            option.textContent = `${type.charAt(0).toUpperCase() + type.slice(1)} Logs`;\n            typeSelector.appendChild(option);\n        });\n\n        // Create refresh button\n        const refreshButton = document.createElement('button');\n        refreshButton.className = 'refresh-button';\n        refreshButton.innerHTML = '\uD83D\uDD04 Refresh';\n\n        // Create analyze button\n        const analyzeButton = document.createElement('button');\n        analyzeButton.className = 'analyze-button';\n        analyzeButton.innerHTML = '\uD83D\uDD0D Analyze';\n\n        header.appendChild(typeSelector);\n        header.appendChild(refreshButton);\n        header.appendChild(analyzeButton);\n        this.element.appendChild(header);\n    }\n\n    createContent() {\n        const content = document.createElement('div');\n        content.className = 'log-content';\n        \n        this.logsContainer = document.createElement('div');\n        this.logsContainer.className = 'logs-container';\n        this.logsContainer.innerHTML = '<div class=\"log-entry info\"><span class=\"log-timestamp\">Now</span><span class=\"log-thread\"></span><span class=\"log-message\">Initializing log panel...</span></div>';\n        \n        content.appendChild(this.logsContainer);\n        this.element.appendChild(content);\n    }\n\n    createAnalysisPanel() {\n        this.analysisContainer = document.createElement('div');\n        this.analysisContainer.className = 'analysis-panel';\n        this.analysisContainer.style.display = 'none';\n        this.analysisContainer.innerHTML = '<h3>Log Analysis</h3>';\n        this.element.appendChild(this.analysisContainer);\n    }\n\n    setupEventListeners() {\n        // Handle log type selection\n        const typeSelector = this.element.querySelector('.log-type-selector');\n        typeSelector.addEventListener('change', (e) => {\n            this.currentLogType = e.target.value;\n            this.refreshLogs();\n        });\n\n        // Handle refresh\n        const refreshButton = this.element.querySelector('.refresh-button');\n        refreshButton.addEventListener('click', () => this.refreshLogs());\n\n        // Handle analyze\n        const analyzeButton = this.element.querySelector('.analyze-button');\n        analyzeButton.addEventListener('click', () => this.analyzeLogs());\n    }\n\n    async fetchLogs(type) {\n        try {\n            // this.showLoading();\n            const logs = await this.logService.fetchLogs(type);\n            // this.displayLogs(logs);\n        } catch (error) {\n            this.showError(error.message);\n        }\n    }\n\n    async refreshLogs() {\n        try {\n            // console.log('Starting log refresh...');\n            // this.showLoading();\n            \n            // Clear existing logs\n            // const logContent = this.element.querySelector('.log-content');\n            // if (logContent) {\n                // console.log('Clearing existing logs');\n            //     logContent.innerHTML = '';\n            // } else {\n            //     console.warn('Log content container not found');\n            // }\n\n            // console.log('Fetching logs of type:', this.currentLogType);\n            const logs = await this.logService.fetchLogs(this.currentLogType);\n            // console.log('Received logs:', logs);\n            \n            if (!logs || !Array.isArray(logs)) {\n                console.warn('Invalid logs format:', logs);\n                throw new Error('Invalid logs format received');\n            }\n\n            if (logs.length === 0) {\n                console.warn('No logs received');\n                logContent.innerHTML = '<div class=\"no-logs\">No logs available</div>';\n                return;\n            }\n            this.analyzeLogs(this.currentLogType);\n\n            // console.log('Displaying logs...');\n            // this.displayLogs(logs);\n            // console.log('Logs displayed successfully');\n        } catch (error) {\n            console.error('Error refreshing logs:', error);\n            this.showError('Failed to fetch logs: ' + error.message);\n        } finally {\n            // Hide loading indicator\n            const loadingIndicator = this.element.querySelector('.loading-indicator');\n            if (loadingIndicator) {\n                loadingIndicator.style.display = 'none';\n            }\n        }\n    }\n\n    async analyzeLogs(type = this.currentLogType) {\n        try {\n            const analysisButton = this.element.querySelector('.analyze-button');\n            analysisButton.disabled = true;\n            analysisButton.textContent = 'Analyzing...';\n\n            // Get current logs from the content\n            const logContent = this.element.querySelector('.log-content');\n            let logSections = [];\n            try {\n                logSections = await this.logService.fetchLogs(type);\n            } catch (error) {\n                this.showError(error.message);\n            }\n\n            // console.log('Collected log sections for analysis:', logSections);\n\n            // Analyze logs using OpenAI\n            const analysis = await this.logService.analyzeBatch(logSections);\n            \n            // Display analysis results\n            this.showAnalysis(analysis);\n        } catch (error) {\n            console.error('Error analyzing logs:', error);\n            this.showError('Failed to analyze logs: ' + error.message);\n        } finally {\n            const analysisButton = this.element.querySelector('.analyze-button');\n            analysisButton.disabled = false;\n            analysisButton.textContent = '\uD83D\uDD0D Analyze';\n        }\n    }\n\n    // displayLogs(sections) {\n        // console.log('Starting displayLogs with sections:', sections);\n        \n    //     const logContent = this.element.querySelector('.log-content');\n    //     if (!logContent) {\n    //         console.error('Log content container not found');\n    //         return;\n    //     }\n\n    //     logContent.innerHTML = '';\n\n    //     if (!sections || sections.length === 0) {\n    //         console.warn('No sections to display');\n    //         logContent.innerHTML = '<div class=\"no-logs\">No logs available</div>';\n    //         return;\n    //     }\n\n        // console.log('Processing sections...');\n    //     sections.forEach((section, index) => {\n            // console.log(`Processing section ${index}:`, section);\n            \n    //         const sectionDiv = document.createElement('div');\n    //         sectionDiv.className = 'log-section';\n\n    //         // Add section header\n    //         const header = document.createElement('div');\n    //         header.className = 'section-header';\n    //         header.textContent = section.timeSection;\n    //         sectionDiv.appendChild(header);\n\n    //         if (!section.logs || !Array.isArray(section.logs)) {\n    //             console.warn(`Invalid logs in section ${index}:`, section.logs);\n    //             return;\n    //         }\n\n    //         // Add logs for this section\n    //         section.logs.forEach((log, logIndex) => {\n                // console.log(`Processing log ${logIndex} in section ${index}:`, log);\n                \n    //             const logEntry = document.createElement('div');\n    //             logEntry.className = `log-entry severity-${log.severity}`;\n    //             logEntry.dataset.severity = log.severity;\n\n    //             // Format timestamp to show only time portion\n    //             const timeOnly = log.timestamp.split(' ')[1];\n\n    //             logEntry.innerHTML = `\n    //                 <span class=\"log-timestamp\">${timeOnly}</span>\n    //                 ${log.projectPath ? `<span class=\"log-project\">${log.projectPath}</span>` : ''}\n    //                 ${log.appId ? `<span class=\"log-appid\">${log.appId}</span>` : ''}\n    //                 <span class=\"log-thread\">${log.thread}</span>\n    //                 <span class=\"log-severity ${log.severity}\">${log.severity.toUpperCase()}</span>\n    //                 <span class=\"log-component\">[${log.component}]</span>\n    //                 <span class=\"log-message ${log.stackTrace && log.stackTrace.length > 0 ? 'has-stack' : ''}\">${this.escapeHtml(log.message)}</span>\n    //             `;\n\n    //             sectionDiv.appendChild(logEntry);\n    //         });\n\n    //         logContent.appendChild(sectionDiv);\n    //     });\n        \n        // console.log('Finished displaying logs');\n    // }\n\n    escapeHtml(unsafe) {\n        return unsafe\n            .replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&#039;\");\n    }\n\n    // displayAnalysis(analysis) {\n    //     const analysisPanel = this.element.querySelector('.analysis-panel');\n    //     if (!analysisPanel) {\n    //         console.error('Analysis panel not found');\n    //         return;\n    //     }\n\n    //     analysisPanel.innerHTML = '';\n        \n    //     const content = document.createElement('div');\n    //     content.className = 'analysis-content';\n    //     content.innerHTML = `<pre>${analysis}</pre>`;\n        \n    //     analysisPanel.appendChild(content);\n    //     analysisPanel.style.display = 'block';\n    // }\n\n    showLoading() {\n        this.logsContainer.innerHTML = '<div class=\"loading\">Loading logs...</div>';\n        this.analysisContainer.style.display = 'none';\n    }\n\n    showError(message) {\n        const errorDiv = document.createElement('div');\n        errorDiv.className = 'log-entry error';\n        errorDiv.innerHTML = `<span class=\"log-message\">${message}</span>`;\n        this.logsContainer.insertBefore(errorDiv, this.logsContainer.firstChild);\n    }\n\n    showAnalysis(analysis) {\n        const analysisPanel = this.element.querySelector('.analysis-panel');\n        if (!analysisPanel) {\n            console.error('Analysis panel not found');\n            return;\n        }\n\n        analysisPanel.innerHTML = '';\n        \n        const content = document.createElement('div');\n        content.className = 'analysis-content';\n        content.innerHTML = `<pre>${analysis}</pre>`;\n        \n        analysisPanel.appendChild(content);\n        analysisPanel.style.display = 'block';\n    }\n}\n\nexport default LogPanel;\n", "/**\n * SearchService - Intelligent code search for WaveMaker projects\n */\n\nclass SearchService {\n    constructor() {\n        this.fileCache = new Map();\n        this.projectId = null;\n        this.baseUrl = 'https://www.wavemakeronline.com/studio/services/projects';\n        this.authCookie = null;\n        this.initialize();\n    }\n\n    /**\n     * Initialize the search service\n     */\n    async initialize() {\n        try {\n            // Get auth cookie from background script\n            const response = await chrome.runtime.sendMessage({ type: 'GET_AUTH_COOKIE' });\n            if (!response.cookie) {\n                throw new Error('Authentication cookie not found');\n            }\n            this.authCookie = response.cookie;\n            // console.log('SearchService initialized with auth cookie');\n        } catch (error) {\n            console.error('Failed to initialize SearchService:', error);\n            throw new Error('Failed to authenticate with WaveMaker');\n        }\n    }\n\n    /**\n     * Extract project ID from WaveMaker Studio URL\n     */\n    getProjectIdFromUrl() {\n        const urlParams = new URLSearchParams(window.location.search);\n        return urlParams.get('project-id');\n    }\n\n    /**\n     * Get file content from WaveMaker API\n     */\n    async getFileContent(filename) {\n        if (!this.authCookie) {\n            await this.initialize();\n        }\n\n        if (this.fileCache.has(filename)) {\n            return this.fileCache.get(filename);\n        }\n\n        const url = `${this.baseUrl}/${this.projectId}/resources/content/project/${filename}`;\n        try {\n            const response = await fetch(url, {\n                method: 'GET',\n                credentials: 'include',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'Cookie': `auth_cookie=${this.authCookie}`\n                }\n            });\n\n            if (!response.ok) {\n                if (response.status === 401) {\n                    // Try to reinitialize on auth failure\n                    await this.initialize();\n                    return this.getFileContent(filename);\n                }\n                throw new Error(`Failed to fetch file: ${response.statusText}`);\n            }\n\n            const content = await response.text();\n            this.fileCache.set(filename, content);\n            return content;\n        } catch (error) {\n            console.error(`Error fetching ${filename}:`, error);\n            throw error;\n        }\n    }\n\n    /**\n     * Search in current editor\n     */\n    async searchInCurrentEditor(query, options = {}) {\n        return new Promise((resolve, reject) => {\n            // Setup message listener\n            const messageHandler = (event) => {\n                if (event.data.type === 'EDITOR_CONTENT_RESPONSE') {\n                    window.removeEventListener('message', messageHandler);\n                    \n                    if (event.data.error) {\n                        reject(new Error(event.data.error));\n                        return;\n                    }\n\n                    const { content, filename } = event.data;\n                    resolve(this.searchInContent(content, query, filename, options));\n                }\n            };\n\n            // Add message listener\n            window.addEventListener('message', messageHandler);\n\n            // Request editor content\n            window.postMessage({ type: 'GET_EDITOR_CONTENT' }, '*');\n\n            // Add timeout\n            setTimeout(() => {\n                window.removeEventListener('message', messageHandler);\n                reject(new Error('Timeout waiting for editor content'));\n            }, 5000);\n        });\n    }\n\n    /**\n     * Search in content with various strategies\n     */\n    searchInContent(content, query, filename, options = {}) {\n        const results = [];\n        \n        try {\n            // 1. Exact match search\n            if (!options.type || options.type === 'exact') {\n                // Escape special regex characters in the query\n                const escapedQuery = query.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n                const regex = new RegExp(escapedQuery, 'gi');\n                let match;\n                while ((match = regex.exec(content)) !== null) {\n                    results.push({\n                        type: 'exact',\n                        filename,\n                        line: this.getLineNumber(content, match.index),\n                        match: match[0],\n                        context: this.getContext(content, match.index)\n                    });\n                }\n            }\n\n            // 2. Pattern-based search\n            if (!options.type || options.type === 'pattern') {\n                const patterns = this.getSearchPatterns(query);\n                patterns.forEach(pattern => {\n                    try {\n                        const regex = new RegExp(pattern, 'gi');\n                        let match;\n                        while ((match = regex.exec(content)) !== null) {\n                            results.push({\n                                type: 'pattern',\n                                filename,\n                                line: this.getLineNumber(content, match.index),\n                                match: match[0],\n                                context: this.getContext(content, match.index)\n                            });\n                        }\n                    } catch (error) {\n                        console.warn(`Invalid pattern ${pattern}:`, error);\n                    }\n                });\n            }\n        } catch (error) {\n            console.error('Search failed:', error);\n            throw new Error('Failed to perform search: ' + error.message);\n        }\n\n        return results;\n    }\n\n    /**\n     * Get search patterns based on query type\n     */\n    getSearchPatterns(query) {\n        const patterns = {\n            // API patterns\n            api: [\n                '\\\\b(fetch|axios)\\\\s*\\\\(',\n                '\\\\bapi\\\\b.*\\\\(',\n                '\\\\bhttp[s]?:\\\\/\\\\/'\n            ],\n            // Function patterns\n            function: [\n                'function\\\\s+(\\\\w+)\\\\s*\\\\(',\n                '(\\\\w+)\\\\s*:\\\\s*function\\\\s*\\\\(',\n                '(\\\\w+)\\\\s*=\\\\s*\\\\([^)]*\\\\)\\\\s*=>'\n            ],\n            // Variable patterns\n            variable: [\n                '\\\\b(var|let|const)\\\\s+(\\\\w+)\\\\s*=',\n                '\\\\bthis\\\\.(\\\\w+)\\\\s*='\n            ],\n            // WaveMaker specific patterns\n            widget: [\n                '\\\\[wm-type=[\\'\"]([^\\'\"]+)[\\'\"]\\\\]',\n                'widget-id=[\\'\"]([^\\'\"]+)[\\'\"]\\\\]',\n                '\\\\bwm\\\\.(\\\\w+)\\\\('\n            ],\n            // Service patterns\n            service: [\n                '\\\\.service\\\\b',\n                'Service\\\\b.*\\\\{',\n                '\\\\@Injectable'\n            ]\n        };\n\n        // Determine which patterns to use based on query\n        const queryLower = query.toLowerCase();\n        let selectedPatterns = [];\n\n        if (queryLower.includes('api') || queryLower.includes('http')) {\n            selectedPatterns.push(...patterns.api);\n        }\n        if (queryLower.includes('function')) {\n            selectedPatterns.push(...patterns.function);\n        }\n        if (queryLower.includes('variable')) {\n            selectedPatterns.push(...patterns.variable);\n        }\n        if (queryLower.includes('widget')) {\n            selectedPatterns.push(...patterns.widget);\n        }\n        if (queryLower.includes('service')) {\n            selectedPatterns.push(...patterns.service);\n        }\n\n        // If no specific patterns matched, use all\n        if (selectedPatterns.length === 0) {\n            selectedPatterns = Object.values(patterns).flat();\n        }\n\n        return selectedPatterns;\n    }\n\n    /**\n     * Get line number from content index\n     */\n    getLineNumber(content, index) {\n        return content.substring(0, index).split('\\n').length;\n    }\n\n    /**\n     * Get surrounding context for a match\n     */\n    getContext(content, index, contextLines = 2) {\n        const lines = content.split('\\n');\n        const lineNumber = this.getLineNumber(content, index);\n        \n        const start = Math.max(0, lineNumber - contextLines - 1);\n        const end = Math.min(lines.length, lineNumber + contextLines);\n        \n        return lines.slice(start, end).join('\\n');\n    }\n\n    /**\n     * Clear file cache\n     */\n    clearCache(filename = null) {\n        if (filename) {\n            this.fileCache.delete(filename);\n        } else {\n            this.fileCache.clear();\n        }\n    }\n}\n\n// Export both the class and a singleton instance\nexport default SearchService;\nexport const searchService = new SearchService();\n", "import SearchService from '../services/searchService.js';\n\n/**\n * SearchPanel - UI component for code search functionality\n */\nclass SearchPanel {\n    constructor() {\n        this.searchService = new SearchService();\n        this.container = document.createElement('div');\n        this.container.className = 'search-panel';\n        \n        this.searchInput = document.createElement('input');\n        this.searchInput.type = 'text';\n        this.searchInput.placeholder = 'Search code...';\n        this.searchInput.className = 'search-input';\n        \n        this.filterButtons = document.createElement('div');\n        this.filterButtons.className = 'filter-buttons';\n        \n        this.resultsContainer = document.createElement('div');\n        this.resultsContainer.className = 'search-results';\n        \n        // Create filter buttons\n        const filterTypes = ['All', 'Exact', 'Pattern'];\n        filterTypes.forEach(type => {\n            const button = document.createElement('button');\n            button.textContent = type;\n            button.className = 'filter-button';\n            if (type === 'All') button.classList.add('active');\n            button.onclick = () => {\n                this.filterButtons.querySelectorAll('button').forEach(btn => btn.classList.remove('active'));\n                button.classList.add('active');\n                this.filterResults(type);\n            };\n            this.filterButtons.appendChild(button);\n        });\n        \n        // Assemble the panel\n        this.container.appendChild(this.searchInput);\n        this.container.appendChild(this.filterButtons);\n        this.container.appendChild(this.resultsContainer);\n        \n        this.attachEventListeners();\n    }\n\n    /**\n     * Initialize the search panel\n     */\n    initialize() {\n        this.createPanel();\n        // Initialize search service\n        this.searchService.initialize();\n    }\n\n    /**\n     * Create the search panel UI\n     */\n    createPanel() {\n        // Create search input\n        const searchBox = document.createElement('div');\n        searchBox.className = 'search-box';\n        \n        this.searchInput = document.createElement('input');\n        this.searchInput.type = 'text';\n        this.searchInput.placeholder = 'Search code (e.g., \"find API calls\" or \"show variables\")';\n        \n        const searchButton = document.createElement('button');\n        searchButton.textContent = 'Search';\n        searchButton.onclick = () => this.handleSearch();\n        \n        searchBox.appendChild(this.searchInput);\n        searchBox.appendChild(searchButton);\n        \n        // Create filter buttons\n        this.filterButtons = document.createElement('div');\n        this.filterButtons.className = 'filter-buttons';\n        \n        const filters = ['All', 'API', 'Functions', 'Variables', 'Widgets', 'Services'];\n        filters.forEach(filter => {\n            const button = document.createElement('button');\n            button.textContent = filter;\n            button.onclick = () => this.filterResults(filter);\n            this.filterButtons.appendChild(button);\n        });\n        \n        // Create results container\n        this.resultsContainer = document.createElement('div');\n        this.resultsContainer.className = 'search-results';\n        \n        // Assemble panel\n        this.container.appendChild(searchBox);\n        this.container.appendChild(this.filterButtons);\n        this.container.appendChild(this.resultsContainer);\n    }\n\n    /**\n     * Display search results\n     */\n    displayResults(results) {\n        this.resultsContainer.innerHTML = '';\n        \n        if (!results || results.length === 0) {\n            const noResults = document.createElement('div');\n            noResults.className = 'no-results';\n            noResults.textContent = 'No results found';\n            this.resultsContainer.appendChild(noResults);\n            return;\n        }\n\n        results.forEach(result => {\n            const resultCard = this.createResultCard(result);\n            this.resultsContainer.appendChild(resultCard);\n        });\n    }\n\n    /**\n     * Create a search result card\n     */\n    createResultCard(result) {\n        const resultCard = document.createElement('div');\n        resultCard.className = 'search-result-card';\n        resultCard.dataset.type = result.type || 'exact';\n        \n        const header = document.createElement('div');\n        header.className = 'result-header';\n        \n        const filename = document.createElement('span');\n        filename.className = 'result-filename';\n        filename.textContent = result.filename;\n        \n        const line = document.createElement('span');\n        line.className = 'result-line';\n        line.textContent = `Line ${result.line}`;\n        \n        const type = document.createElement('span');\n        type.className = 'result-type';\n        type.textContent = result.type || 'exact';\n        \n        header.appendChild(filename);\n        header.appendChild(line);\n        header.appendChild(type);\n\n        const content = document.createElement('div');\n        content.className = 'result-content';\n        content.innerHTML = this.highlightCode(result.context, result.match);\n\n        resultCard.appendChild(header);\n        resultCard.appendChild(content);\n        resultCard.onclick = () => this.navigateToResult(result);\n\n        return resultCard;\n    }\n\n    /**\n     * Handle search execution\n     */\n    async handleSearch() {\n        const query = this.searchInput.value.trim();\n        if (!query) {\n            this.showError('Please enter a search query');\n            return;\n        }\n\n        try {\n            // Show loading state\n            this.showLoading();\n            \n            // Perform search\n            const results = await this.searchService.searchInCurrentEditor(query);\n            \n            // Display results\n            this.displayResults(results);\n        } catch (error) {\n            console.error('Search failed:', error);\n            this.showError('Search failed: ' + (error.message || 'Unknown error'));\n        }\n    }\n\n    /**\n     * Highlight code in search results\n     */\n    highlightCode(context, match) {\n        try {\n            // Escape special regex characters in the match\n            const escapedMatch = match.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n            return context.replace(\n                new RegExp(escapedMatch, 'g'),\n                `<span class=\"highlight\">${match}</span>`\n            );\n        } catch (error) {\n            console.warn('Failed to highlight code:', error);\n            return context; // Return unhighlighted code if highlighting fails\n        }\n    }\n\n    /**\n     * Navigate to a search result\n     */\n    navigateToResult(result) {\n        if (!result || !result.filename) {\n            console.error('Invalid search result:', result);\n            return;\n        }\n\n        // Send message to navigate to file and line\n        window.postMessage({\n            type: 'NAVIGATE_TO_FILE',\n            data: {\n                filename: result.filename,\n                line: result.line,\n                column: 0\n            }\n        }, '*');\n    }\n\n    /**\n     * Filter results by type\n     */\n    filterResults(filter) {\n        if (!filter) return;\n\n        const cards = this.resultsContainer.querySelectorAll('.search-result-card');\n        cards.forEach(card => {\n            const type = card.dataset.type;\n            if (filter.toLowerCase() === 'all' || type === filter.toLowerCase()) {\n                card.style.display = 'block';\n            } else {\n                card.style.display = 'none';\n            }\n        });\n    }\n\n    /**\n     * Attach event listeners\n     */\n    attachEventListeners() {\n        // Handle enter key in search input\n        this.searchInput.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') {\n                this.handleSearch();\n            }\n        });\n\n        // Add keyboard shortcut (Ctrl/Cmd + K)\n        document.addEventListener('keydown', (e) => {\n            if ((e.ctrlKey || e.metaKey) && e.key === 'k') {\n                e.preventDefault();\n                this.searchInput.focus();\n            }\n        });\n    }\n\n    showLoading() {\n        this.resultsContainer.innerHTML = '<div class=\"loading\">Searching... <div class=\"spinner\"></div></div>';\n    }\n\n    showError(message) {\n        this.resultsContainer.innerHTML = `<div class=\"error\">${message}</div>`;\n    }\n\n    displayError(message) {\n        this.resultsContainer.innerHTML = `\n            <div class=\"error-message\">\n                <span class=\"error-icon\">\u26A0\uFE0F</span>\n                <span class=\"error-text\">${message}</span>\n            </div>\n        `;\n    }\n}\n\n// Export as singleton\nexport default SearchPanel;\n", "// import SearchPanel from './searchPanel.js';\nimport LogPanel from './logPanel.js';\nimport SearchPanel from './searchPanel.js';\n\nclass WaveMakerCopilotSidebar {\n    constructor() {\n        this.sidebarElement = null;\n        this.chatContainer = null;\n        this.isOpen = false;\n        // this.searchPanel = null;\n        this.logPanel = null;\n        this.searchPanel = null;\n        this.initialize();\n        this.setupToastObserver();\n    }\n\n    initialize() {\n        // Create sidebar element\n        this.sidebarElement = document.createElement('div');\n        this.sidebarElement.className = 'wm-copilot-sidebar';\n        \n        // Add sidebar content\n        this.sidebarElement.innerHTML = `\n            <div class=\"sidebar-header\">\n                <h2>Surfboard AI</h2>\n                <div class=\"tab-buttons\">\n                    <button class=\"tab-button active\" data-tab=\"chat\">Chat</button>\n                    <button class=\"tab-button\" data-tab=\"logs\">Logs</button>\n                    <button class=\"tab-button\" data-tab=\"search\">Search</button>\n                </div>\n                <button class=\"minimize-button\">\u2212</button>\n            </div>\n            <div class=\"sidebar-content\">\n                <div class=\"chat-container active\"></div>\n                <div class=\"search-container\"></div>\n                <div class=\"log-container\"></div>\n                <div class=\"context-panel\"></div>\n            </div>\n            <div class=\"input-container\">\n                <textarea placeholder=\"Ask me anything...\" rows=\"1\"></textarea>\n                <button class=\"send-button\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path d=\"M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z\"/>\n                    </svg>\n                </button>\n            </div>\n        `;\n\n        // Store chat container reference\n        this.chatContainer = this.sidebarElement.querySelector('.chat-container');\n\n        // Add to document\n        document.body.appendChild(this.sidebarElement);\n\n        // Setup event listeners\n        this.setupEventListeners();\n        // this.setupSearchPanel();\n\n        // Create and add toggle button\n        this.createToggleButton();\n    }\n\n    async initializePanels() {\n        const logContainer = this.sidebarElement.querySelector('.log-container');\n        // console.log('Log container:', logContainer);\n        if (!this.logPanel && logContainer) {\n            // console.log('Creating new LogPanel');\n            this.logPanel = new LogPanel();\n            // console.log('LogPanel created:', this.logPanel);\n            logContainer.appendChild(this.logPanel.element);\n            // console.log('LogPanel appended to container');\n        }\n        const searchContainer = this.sidebarElement.querySelector('.search-container');\n        if (!this.searchPanel && searchContainer) {\n            this.searchPanel = new SearchPanel();\n            searchContainer.appendChild(this.searchPanel.container);\n        }\n    }\n\n    createToggleButton() {\n        const toggleButton = document.createElement('button');\n        toggleButton.className = 'sidebar-toggle';\n        toggleButton.innerHTML = `\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"/>\n            </svg>\n        `;\n        document.body.appendChild(toggleButton);\n\n        // Add toggle functionality\n        toggleButton.addEventListener('click', () => {\n            this.toggleSidebar();\n            toggleButton.classList.toggle('active');\n        });\n    }\n\n    setupEventListeners() {\n        // Minimize button\n        const minimizeButton = this.sidebarElement.querySelector('.minimize-button');\n        minimizeButton.addEventListener('click', () => this.toggleSidebar());\n\n        // Send button and textarea\n        const sendButton = this.sidebarElement.querySelector('.send-button');\n        const textarea = this.sidebarElement.querySelector('textarea');\n        \n        const sendMessage = () => {\n            const message = textarea.value.trim();\n            if (message) {\n                this.addMessage(message, 'user');\n                textarea.value = '';\n                textarea.style.height = 'auto';\n                \n                // Emit custom event for content script to handle\n                const event = new CustomEvent('surfboard-message', { \n                    detail: { message, type: 'user' }\n                });\n                document.dispatchEvent(event);\n            }\n        };\n\n        // Send button click\n        sendButton.addEventListener('click', sendMessage);\n\n        // Send on Enter (but Shift+Enter for new line)\n        textarea.addEventListener('keydown', (event) => {\n            if (event.key === 'Enter' && !event.shiftKey) {\n                event.preventDefault();\n                sendMessage();\n            }\n        });\n\n        // Auto-resize textarea\n        textarea.addEventListener('input', () => {\n            textarea.style.height = 'auto';\n            textarea.style.height = Math.min(textarea.scrollHeight, 200) + 'px';\n        });\n\n        // Tab switching\n        const tabButtons = this.sidebarElement.querySelectorAll('.tab-button');\n        tabButtons.forEach(button => {\n            button.addEventListener('click', () => {\n                // Remove active class from all buttons and containers\n                tabButtons.forEach(btn => btn.classList.remove('active'));\n                this.sidebarElement.querySelectorAll('.sidebar-content > div').forEach(container => {\n                    container.classList.remove('active');\n                });\n\n                // Add active class to clicked button and corresponding container\n                button.classList.add('active');\n                const tabName = button.getAttribute('data-tab');\n                let containerClass = tabName === 'logs' ? 'log' : tabName;\n                const container = this.sidebarElement.querySelector(`.${containerClass}-container`);\n                if (container) {\n                    container.classList.add('active');\n                }\n\n                // Initialize log panel if logs tab is selected\n                if (tabName === 'logs') {\n                    this.initializePanels();\n                }\n            });\n        });\n\n        // Keyboard shortcuts\n        document.addEventListener('keydown', (e) => {\n            if (e.ctrlKey && e.key === '\\\\') {\n                this.toggleSidebar();\n            }\n        });\n    }\n\n    setupToastObserver() {\n        // Create a mutation observer to watch for toasts\n        const observer = new MutationObserver((mutations) => {\n            for (const mutation of mutations) {\n                if (mutation.type === 'childList') {\n                    // Check added nodes for error toasts\n                    mutation.addedNodes.forEach(node => {\n                        if (\n                            // node.nodeType === 1 && // Element node\n                            node.classList.contains('toast') && \n                            node.classList.contains('toast-error')) {\n                                console.log('Error toast detected, opening sidebar and switching to logs');\n                                const messageElement = node.querySelector('.toast-message');\n                                if (messageElement && messageElement.ariaLabel) {\n                                    this.openWithLogs(\"application\");\n                                }\n\n                            // console.log('Error toast detected, opening sidebar and switching to logs');\n                        }\n                        if (node.nodeType === 1 && // Element node\n                            node.classList.contains('ngx-toastr') && \n                            node.classList.contains('toast-error')) {\n                                const messageElement = node.querySelector('.toast-message');\n                                if (messageElement && messageElement.textContent.trim().startsWith('{\"headers\":')) {\n                                    this.openWithLogs();\n                                }\n\n                            // console.log('Error toast detected, opening sidebar and switching to logs');\n                        }\n                        \n                    });\n                }\n            }\n        });\n\n        // Start observing the body for toast elements\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n    }\n\n    async openWithLogs(logType=\"server\") {\n        // Open sidebar\n       if(!this.isOpen){\n        \n           this.toggleSidebar();\n       }\n        \n        \n        // Switch to logs panel\n        const logsTab = this.sidebarElement.querySelector('[data-tab=\"logs\"]');\n        if (logsTab) {\n            // Deactivate all tabs\n            await logsTab.click()\n            // await this.logPanel.initializeService();\n            if(this.logPanel){\n                this.logPanel.currentLogType = logType\n                await this.logPanel.analyzeLogs(logType);\n\n            }\n            \n        }\n    }\n\n    /*setupSearchPanel() {\n        // Initialize search panel first\n        const searchContainer = this.sidebarElement.querySelector('.search-container');\n        this.searchPanel = new SearchPanel();\n        this.searchPanel.initialize(); // Initialize before accessing container\n        searchContainer.appendChild(this.searchPanel.container);\n\n        // Handle tab switching\n        const tabButtons = this.sidebarElement.querySelectorAll('.tab-button');\n        tabButtons.forEach(button => {\n            button.addEventListener('click', () => {\n                // Update active tab button\n                tabButtons.forEach(btn => btn.classList.remove('active'));\n                button.classList.add('active');\n\n                // Show/hide containers\n                const tabName = button.dataset.tab;\n                const chatContainer = this.sidebarElement.querySelector('.chat-container');\n                const searchContainer = this.sidebarElement.querySelector('.search-container');\n\n                if (tabName === 'chat') {\n                    chatContainer.classList.add('active');\n                    searchContainer.classList.remove('active');\n                } else {\n                    chatContainer.classList.remove('active');\n                    searchContainer.classList.add('active');\n                }\n            });\n        });\n    }*/\n\n    toggleSidebar() {\n        this.isOpen = !this.isOpen;\n        this.sidebarElement.classList.toggle('open');\n        \n        // Update minimize button text\n        const minimizeButton = this.sidebarElement.querySelector('.minimize-button');\n        minimizeButton.textContent = this.isOpen ? '\u2212' : '+';\n    }\n\n    addMessage(message, type) {\n        const messageDiv = document.createElement('div');\n        messageDiv.className = `chat-message ${type}`;\n\n        if (type === 'assistant') {\n            // Convert markdown to HTML\n            messageDiv.innerHTML = this.processMarkdown(message);\n        } else {\n            messageDiv.textContent = message;\n        }\n\n        this.chatContainer.appendChild(messageDiv);\n        this.chatContainer.scrollTop = this.chatContainer.scrollHeight;\n    }\n\n    processMarkdown(text) {\n        // Process code blocks\n        text = text.replace(/```(\\w+)?\\n([\\s\\S]+?)\\n```/g, (match, lang, code) => {\n            const codeBlock = this.createCodeBlock(code.trim(), lang);\n            const tempContainer = document.createElement('div');\n            tempContainer.appendChild(codeBlock);\n            return tempContainer.innerHTML;\n        });\n\n        // Process inline code\n        text = text.replace(/`([^`]+)`/g, '<code>$1</code>');\n\n        return text;\n    }\n\n    createCodeBlock(code, language) {\n        const codeBlock = document.createElement('div');\n        codeBlock.className = 'code-block';\n\n        // Create header\n        const header = document.createElement('div');\n        header.className = 'code-block-header';\n\n        // Add language label\n        const languageLabel = document.createElement('span');\n        languageLabel.className = 'language-label';\n        languageLabel.textContent = language || 'text';\n\n        // Create copy button\n        const copyButton = document.createElement('button');\n        copyButton.className = 'copy-button';\n        copyButton.type = 'button';\n        copyButton.innerHTML = `\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n                <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            <span>Copy</span>\n        `;\n\n        // console.log('Adding click handlers to button...');\n\n        // Add both click handlers for testing\n        copyButton.onclick = function(e) {\n            // console.log('Copy button clicked via onclick');\n            handleCopy(e);\n        };\n\n        copyButton.addEventListener('click', function(e) {\n            // console.log('Copy button clicked via addEventListener');\n            handleCopy(e);\n        });\n\n        // Separate copy handler function\n        const handleCopy = async (e) => {\n            // console.log('Handling copy...');\n            e.preventDefault();\n            e.stopPropagation();\n            \n            const span = copyButton.querySelector('span');\n            \n            try {\n                // console.log('Attempting to copy code:', code);\n                await navigator.clipboard.writeText(code);\n                // console.log('Code copied successfully');\n                copyButton.classList.add('copied');\n                span.textContent = 'Copied!';\n            } catch (err) {\n                console.error('Failed to copy:', err);\n                copyButton.classList.add('error');\n                span.textContent = 'Error!';\n            }\n            \n            // Reset button state after delay\n            setTimeout(() => {\n                copyButton.classList.remove('copied', 'error');\n                span.textContent = 'Copy';\n            }, 2000);\n        };\n\n        // Assemble header\n        header.appendChild(languageLabel);\n        header.appendChild(copyButton);\n        codeBlock.appendChild(header);\n\n        // Create code content\n        const codeContent = document.createElement('div');\n        codeContent.className = 'code-content';\n        const preElement = document.createElement('pre');\n        const codeElement = document.createElement('code');\n        codeElement.className = `language-${language || 'text'}`;\n        \n        // Set code content\n        if (window.Prism) {\n            codeElement.innerHTML = Prism.highlight(\n                code,\n                Prism.languages[language] || Prism.languages.text,\n                language || 'text'\n            );\n        } else {\n            codeElement.textContent = code;\n        }\n\n        // Assemble code block\n        preElement.appendChild(codeElement);\n        codeContent.appendChild(preElement);\n        codeBlock.appendChild(codeContent);\n\n        return codeBlock;\n    }\n\n    showError(message) {\n        const errorDiv = document.createElement('div');\n        errorDiv.className = 'error-message';\n        errorDiv.textContent = message;\n        this.sidebarElement.appendChild(errorDiv);\n\n        // Auto-remove after 5 seconds\n        setTimeout(() => {\n            errorDiv.remove();\n        }, 5000);\n    }\n\n    updateContextPanel(context) {\n        const panel = this.sidebarElement.querySelector('.context-panel');\n        \n        panel.innerHTML = `\n            <div class=\"context-section\">\n                <h3>Current Context</h3>\n                <div class=\"context-details\">\n                    ${this.formatContextDetails(context)}\n                </div>\n            </div>\n        `;\n    }\n\n    formatContextDetails(context) {\n        if (!context) return '<p>No context available</p>';\n\n        return `\n            <div class=\"context-item\">\n                <strong>Page:</strong> ${context.activePage?.name || 'N/A'}\n            </div>\n            <div class=\"context-item\">\n                <strong>Component:</strong> ${context.activeComponent?.type || 'N/A'}\n            </div>\n            <div class=\"context-item\">\n                <strong>Last Updated:</strong> ${new Date().toLocaleTimeString()}\n            </div>\n        `;\n    }\n\n    getChatContainer() {\n        return this.sidebarElement.querySelector('.chat-container');\n    }\n\n    showLoading() {\n        const loader = document.createElement('div');\n        loader.className = 'loading-spinner';\n        this.sidebarElement.appendChild(loader);\n    }\n\n    hideLoading() {\n        const loader = this.sidebarElement.querySelector('.loading-spinner');\n        if (loader) {\n            loader.remove();\n        }\n    }\n\n    \n}\n\nexport default WaveMakerCopilotSidebar;\n", "class AIService {\n    constructor() {\n        this.API_KEY = ''; // Will be set through extension settings\n        this.API_URL = 'https://api.openai.com/v1/chat/completions';\n        this.MODEL = 'gpt-3.5-turbo';\n        this.CONFIG = {\n            max_tokens: 150,\n            temperature: 0.2, // Lower temperature for more focused completions\n            top_p: 0.95,     // Slightly reduce randomness\n            presence_penalty: 0.1, // Slight penalty for repetition\n            frequency_penalty: 0.1 // Slight penalty for common tokens\n        };\n    }\n\n    setApiKey(key) {\n        this.API_KEY = key;\n    }\n\n    createPrompt(context, language) {\n        // Extract cursor position from context\n        const cursorIndex = context.indexOf('\u25BC');\n        const beforeCursor = context.substring(0, cursorIndex);\n        const afterCursor = context.substring(cursorIndex + 1);\n\n        return [\n            {\n                role: 'system',\n                content: `You are a precise code completion model for ${language}. Follow these rules:\n1. Complete the code at the cursor position (\u25BC) naturally\n2. Focus on the local context and variable names\n3. Maintain consistent style with the surrounding code\n4. Only provide the completion text, no explanations\n5. Ensure syntactic correctness\n6. Use existing variables and functions when appropriate`\n            },\n            {\n                role: 'user',\n                content: `Complete the following ${language} code at the cursor position (\u25BC). Return ONLY the completion text:\n\nBefore cursor:\n${beforeCursor}\n\u25BC\nAfter cursor:\n${afterCursor}`\n            }\n        ];\n    }\n\n    async makeAPIRequest(messages, n = 1, signal = null) {\n        if (!this.API_KEY) {\n            throw new Error('OpenAI API key not set');\n        }\n\n        try {\n            const response = await fetch(this.API_URL, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${this.API_KEY}`\n                },\n                body: JSON.stringify({\n                    model: this.MODEL,\n                    messages,\n                    ...this.CONFIG,\n                    n\n                }),\n                signal // Add abort signal to fetch request\n            });\n\n            if (!response.ok) {\n                const error = await response.json();\n                throw new Error(error.error?.message || 'API request failed');\n            }\n\n            const data = await response.json();\n            return data.choices;\n        } catch (error) {\n            console.error('API request failed:', error);\n            throw error;\n        }\n    }\n\n    async getCompletion(context, language) {\n        const messages = this.createPrompt(context, language);\n        const choices = await this.makeAPIRequest(messages, 1);\n        return choices[0].message.content.trim();\n    }\n\n    async getMultipleCompletions(context, language, n = 3, signal = null) {\n        const messages = this.createPrompt(context, language);\n        const choices = await this.makeAPIRequest(messages, n, signal);\n        return choices.map(choice => choice.message.content.trim());\n    }\n}\n\nexport default new AIService();\n", "import aiService from '../services/aiService.js';\n\nclass CompletionManager {\n    constructor() {\n        this.currentEditor = null;\n        this.editorType = null;\n        this.monacoInstance = null;\n        this.inlineDecorationIds = [];\n        this.lastInlineText = '';\n        this.isProcessingInline = false;\n        this.initializeAttempts = 0;\n        this.maxInitializeAttempts = 20; // 10 seconds total (20 * 500ms)\n        this._inlineProviderRegistered = false;\n        this.contextWindow = 5; // Number of lines to include for context\n        \n        // Configuration for inline completions\n        this.inlineConfig = {\n            debounceTime: 500,      // Increased to 500ms\n            minRequestInterval: 750, // Minimum time between requests\n            maxPendingRequests: 1    // Maximum number of pending requests\n        };\n\n        // Create debounced handlers\n        this.debouncedHandleContentChange = this.debounce(\n            this.handleContentChange.bind(this),\n            this.inlineConfig.debounceTime\n        );\n\n        // Start initialization\n        this.initialize();\n    }\n\n    debounce(func, wait) {\n        let timeout;\n        return (...args) => {\n            clearTimeout(timeout);\n            timeout = setTimeout(() => {\n                func.apply(this, args);\n            }, wait);\n        };\n    }\n\n    throttle(func, limit) {\n        let inThrottle;\n        return (...args) => {\n            if (!inThrottle) {\n                func.apply(this, args);\n                inThrottle = true;\n                setTimeout(() => inThrottle = false, limit);\n            }\n        };\n    }\n\n    initialize() {\n        // console.log('CompletionManager initializing...');\n        this.injectMonacoHelper();\n        this.setupMessageListener();\n        this.setupAPIKey();\n        this.setupEditorObserver();\n        // console.log('CompletionManager initialized');\n    }\n\n    setupAPIKey() {\n        // Get API key from storage\n        chrome.storage.sync.get(['openaiApiKey'], (result) => {\n            if (result.openaiApiKey) {\n                aiService.setApiKey(result.openaiApiKey);\n            }\n        });\n\n        // Listen for API key changes\n        chrome.storage.onChanged.addListener((changes) => {\n            if (changes.openaiApiKey) {\n                aiService.setApiKey(changes.openaiApiKey.newValue);\n            }\n        });\n    }\n\n    injectMonacoHelper() {\n        var s = document.createElement('script');\n        s.src = chrome.runtime.getURL('src/js/inject/monacoHelper.js');\n        s.onload = function() { this.remove(); };\n        (document.head || document.documentElement).appendChild(s);\n    }\n\n    setupMessageListener() {\n        window.addEventListener('message', (event) => {\n            if (event.source !== window) return;\n\n            const { type, data } = event.data;\n            \n            switch (type) {\n                case 'MONACO_HELPER_READY':\n                    // console.log('Monaco helper ready, setting up completion provider...');\n                    // Send message to page context\n                    window.postMessage({\n                        type: 'SETUP_COMPLETION_PROVIDER',\n                        languages: ['javascript', 'typescript', 'html', 'css']\n                    }, '*');\n                    break;\n                case 'GET_EDITOR_INSTANCE_RESPONSE':\n                    // console.log('Got editor instance response:', data);\n                    if (data && data.success) {\n                        this.monacoInstance = data.editor;\n                        // console.log('Monaco instance set:', this.monacoInstance);\n                    }\n                    break;\n                case 'SETUP_PROVIDER_RESPONSE':\n                    // console.log('Completion provider setup response:', data);\n                    if (data && data.success) {\n                        // console.log('Completion provider registered successfully');\n                    } else {\n                        console.error('Failed to setup completion provider:', data?.error);\n                    }\n                    break;\n                case 'GET_INLINE_COMPLETIONS':\n                    // console.log('Getting inline completions for:', data);\n                    this.handleCompletionRequest(data);\n                    break;\n            }\n        });\n    }\n\n    async handleCompletionRequest(data) {\n        // Check if we should skip this request\n        const now = Date.now();\n        if (now - this._lastRequestTime < this.inlineConfig.minRequestInterval) {\n            return;\n        }\n        this._lastRequestTime = now;\n\n        try {\n            const context = this.getContext(data);\n            if (!context) return;\n\n            // Cancel any pending request\n            if (this._pendingRequest) {\n                this._pendingRequest.abort();\n            }\n\n            // Create new request\n            const controller = new AbortController();\n            this._pendingRequest = controller;\n\n            // Get completions from AI service\n            const completions = await aiService.getMultipleCompletions(\n                context.text,\n                context.language,\n                3, // Number of completions\n                controller.signal // Pass signal separately\n            );\n            \n            // Clear pending request if this one completed\n            if (this._pendingRequest === controller) {\n                this._pendingRequest = null;\n            }\n\n            // Calculate proper range based on word position\n            const startColumn = data.wordUntil ? data.wordUntil.endColumn : data.position.column;\n            \n            // Send completions back to the editor\n            window.postMessage({\n                type: 'INLINE_COMPLETIONS_RESPONSE',\n                data: {\n                    modelId: data.modelId,\n                    items: completions.map(completion => ({\n                        text: completion,\n                        range: {\n                            startLineNumber: data.position.lineNumber,\n                            startColumn: startColumn,\n                            endLineNumber: data.position.lineNumber,\n                            endColumn: startColumn\n                        }\n                    }))\n                }\n            }, '*');\n        } catch (error) {\n            if (error.name === 'AbortError') {\n                // console.log('Completion request cancelled');\n            } else {\n                console.error('Error handling completion request:', error);\n            }\n            // Send empty completions on error\n            window.postMessage({\n                type: 'INLINE_COMPLETIONS_RESPONSE',\n                data: {\n                    modelId: data.modelId,\n                    items: []\n                }\n            }, '*');\n        }\n    }\n\n    getContext(data) {\n        const { contextText, position, language, cursorOffset } = data;\n        \n        // Split the text into before and after cursor\n        const prefix = contextText.slice(0, cursorOffset);\n        const suffix = contextText.slice(cursorOffset);\n        \n        // Calculate relative cursor position\n        const lines = prefix.split('\\n');\n        const cursorLine = lines.length;\n        const cursorColumn = lines[lines.length - 1].length + 1;\n        \n        // Combine the context with cursor position marker\n        return {\n            text: `${prefix}\u25BC${suffix}`,\n            language,\n            cursorLine,\n            cursorColumn\n        };\n    }\n\n    setupEditorObserver() {\n        // console.log('Setting up editor observer...');\n        // Watch for WaveMaker editor elements being added to the DOM\n        const observer = new MutationObserver((mutations) => {\n            for (const mutation of mutations) {\n                for (const node of mutation.addedNodes) {\n                    if (node.nodeType === Node.ELEMENT_NODE) {\n                        // Try all possible WaveMaker editor containers\n                        const containers = [\n                            ...node.querySelectorAll('wms-editor, .wm-code-editor, .monaco-editor'),\n                            ...(node.matches('wms-editor, .wm-code-editor, .monaco-editor') ? [node] : [])\n                        ];\n                        \n                        for (const container of containers) {\n                            // console.log('Found potential editor container:', container.className || container.tagName);\n                            \n                            // For wms-editor, look inside the shadow DOM if it exists\n                            if (container.tagName.toLowerCase() === 'wms-editor' && container.shadowRoot) {\n                                const shadowEditor = container.shadowRoot.querySelector('.monaco-editor');\n                                if (shadowEditor && !shadowEditor.classList.contains('rename-box')) {\n                                    // console.log('Found Monaco editor in shadow DOM');\n                                    this.setupEditorListeners(shadowEditor);\n                                }\n                                continue;\n                            }\n                            \n                            // For regular containers, look for Monaco editor directly\n                            const editor = container.matches('.monaco-editor') ? \n                                container : container.querySelector('.monaco-editor');\n                                \n                            if (editor && !editor.classList.contains('rename-box')) {\n                                // console.log('Found Monaco editor');\n                                this.setupEditorListeners(editor);\n                            }\n                        }\n                    }\n                }\n            }\n        });\n\n        // Check for existing editors\n        // console.log('Checking for existing editors...');\n        ['wms-editor', '.wm-code-editor', '.monaco-editor'].forEach(selector => {\n            const existingEditors = document.querySelectorAll(selector);\n            existingEditors.forEach(container => {\n                // console.log('Found existing container:', selector);\n                \n                if (container.tagName.toLowerCase() === 'wms-editor' && container.shadowRoot) {\n                    const shadowEditor = container.shadowRoot.querySelector('.monaco-editor');\n                    if (shadowEditor && !shadowEditor.classList.contains('rename-box')) {\n                        // console.log('Found existing Monaco editor in shadow DOM');\n                        this.setupEditorListeners(shadowEditor);\n                    }\n                } else {\n                    const editor = container.matches('.monaco-editor') ? \n                        container : container.querySelector('.monaco-editor');\n                        \n                    if (editor && !editor.classList.contains('rename-box')) {\n                        // console.log('Found existing Monaco editor');\n                        this.setupEditorListeners(editor);\n                    }\n                }\n            });\n        });\n\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n        \n        // console.log('Editor observer setup complete');\n    }\n\n    setupEditorListeners(editor) {\n        if (!editor || !this.isWaveMakerEditor(editor)) {\n            // console.log('Invalid editor or not a WaveMaker editor');\n            return;\n        }\n        \n        // console.log('Setting up editor listeners');\n        \n        try {\n            // Find the textarea that Monaco uses for input\n            const textArea = editor.querySelector('.inputarea');\n            if (!textArea) {\n                // console.log('Monaco input area not found');\n                return;\n            }\n\n            // Find the data-keybinding-context attribute which uniquely identifies the editor\n            const editorElement = editor.closest('[data-keybinding-context]');\n            if (!editorElement) {\n                // console.log('Editor context not found');\n                return;\n            }\n\n            const editorId = editorElement.getAttribute('data-keybinding-context');\n            // console.log('Found editor ID:', editorId);\n\n            // Use the injected helper to get editor instance\n            window.postMessage({\n                type: 'GET_EDITOR_INSTANCE',\n                editorId: editorId\n            }, '*');\n\n            this.currentEditor = editor;\n            \n            // Handle focus events\n            editor.addEventListener('focus', () => {\n                // console.log('Editor focused');\n                this.setCurrentEditor(editor);\n            });\n            \n            // Handle click events\n            editor.addEventListener('click', () => {\n                this.setCurrentEditor(editor);\n            });\n            \n            // Handle content changes through the textarea\n            this.monacoInstance.onDidChangeModelContent((event) => {\n                this.debouncedHandleContentChange(event);\n            });\n\n        } catch (error) {\n            console.error('Error setting up editor listeners:', error);\n        }\n    }\n\n    handleContentChange(event) {\n        if (this.isProcessingInline || !this.monacoInstance) return;\n        \n        const position = this.monacoInstance.getPosition();\n        if (position) {\n            this.monacoInstance.trigger('inline', 'editor.action.inlineCompletion');\n        }\n    }\n\n    isWaveMakerEditor(element) {\n        if (!element) return false;\n        \n        // console.log('Checking editor:', element.className);\n        \n        // Exclude rename box and other utility widgets\n        if (element.classList.contains('rename-box')) {\n            // console.log('Skipping rename box widget');\n            return false;\n        }\n        \n        // Check if it's a Monaco editor with the correct classes\n        const isMonacoEditor = element.classList.contains('monaco-editor');\n        const hasCorrectTheme = element.classList.contains('vs-dark') || element.classList.contains('vs');\n        const isNotWidget = !element.hasAttribute('widgetid');\n        \n        if (isMonacoEditor && hasCorrectTheme && isNotWidget) {\n            // console.log('Valid Monaco editor found');\n            return true;\n        }\n        \n        // Check if it's within a WaveMaker editor container\n        const wmContainer = element.closest('wms-editor, .wm-code-editor');\n        if (wmContainer) {\n            // console.log('Found within WaveMaker container:', wmContainer.tagName || wmContainer.className);\n            return true;\n        }\n        \n        // console.log('Not a valid WaveMaker editor');\n        return false;\n    }\n\n    detectEditorType(editor) {\n        if (!editor) return null;\n        \n        // Find the WaveMaker Studio editor container\n        const container = editor.closest('.wm-code-editor');\n        if (!container) return null;\n\n        // Try to get the mode from the editor's data attributes or class names\n        const editorClasses = editor.className;\n        \n        if (editorClasses.includes('html-editor') || container.getAttribute('data-mode-id') === 'html') {\n            return 'markup';\n        } else if (editorClasses.includes('css-editor') || container.getAttribute('data-mode-id') === 'css') {\n            return 'style';\n        } else if (editorClasses.includes('js-editor') || container.getAttribute('data-mode-id') === 'javascript') {\n            return 'script';\n        }\n        \n        // Fallback: try to detect from the content or file extension\n        const editorContent = editor.textContent.trim().toLowerCase();\n        if (editorContent.startsWith('<!doctype') || editorContent.includes('<html')) {\n            return 'markup';\n        } else if (editorContent.includes('{') && editorContent.includes('}') && \n                   (editorContent.includes(':') || editorContent.includes(';'))) {\n            return 'style';\n        }\n        \n        // Default to script if we can't determine\n        return 'script';\n    }\n\n    setCurrentEditor(editor) {\n        if (this.currentEditor === editor) return;\n        \n        // console.log('Setting current editor:', editor);\n        this.currentEditor = editor;\n        this.editorType = this.detectEditorType(editor);\n        // console.log('Editor type:', this.editorType);\n    }\n\n}\n\nexport default CompletionManager;\n", "/**\n * WaveMaker Copilot Content Script\n * Main entry point for the extension's content script\n */\n\n// Global instance\nlet copilotInstance = null;\n\nimport WMContextManager from './context/wmContext.js';\nimport WaveMakerCopilotSidebar from './ui/sidebar.js';\nimport CompletionManager from './completion/completionManager.js';\nimport { LogService } from './services/logService.js';\n\nclass SurfboardAI {\n    constructor() {\n        this.contextManager = new WMContextManager();\n        this.apiKey = null;\n        this.model = 'llama3-8b-8192';\n        this.apiEndpoint = 'https://api.groq.com/openai/v1';\n        this.isInitialized = false;\n        this.sidebar = null;\n        this.completionManager = null;\n        this.logService = null;\n        this.initialize();\n        this.initializeLogService();\n    }\n\n    async initialize() {\n        try {\n            console.log('Initializing SurfboardAI...');\n            \n            // Initialize log service first to catch any initialization errors\n            this.logService = new LogService();\n            await this.initializeLogService();\n\n            // Initialize completion manager first\n            this.completionManager = new CompletionManager();\n            console.log('CompletionManager initialized');\n            \n            // Load API key\n            this.apiKey=await this.loadConfiguration();\n            this.sidebar = new WaveMakerCopilotSidebar();\n            await this.contextManager.initialize();\n            this.setupMessageListener();\n            this.isInitialized = true;\n            \n            // Add initial greeting\n            this.sidebar.addMessage(\n                \"Hello! \uD83D\uDC4B I'm your Surfboard AI assistant. I can help you with:\\n\\n\" +\n                \"- Writing and editing code\\n\" +\n                \"- Answering questions about WaveMaker\\n\" +\n                \"- Providing code examples\\n\" +\n                \"- Debugging issues\\n\\n\" +\n                \"How can I assist you today?\",\n                'assistant'\n            );\n            \n            console.log('Surfboard.AI initialized successfully');\n        } catch (error) {\n            console.error('Failed to initialize SurfboardAI:', error);\n        }\n    }\n    async initializeLogService() {\n        try {\n            // Get OpenAI API key\n            const apiKey = await this.getOpenAIKey();\n            if (!apiKey) {\n                console.warn('OpenAI API key not found');\n                this.showError('OpenAI API key not configured. AI analysis will not be available.');\n                return;\n            }\n\n            // Initialize service with API key\n            await this.logService.initialize(apiKey);\n            // await this.refreshLogs();\n        } catch (error) {\n            console.error('Error initializing LogService:', error);\n            this.showError('Failed to initialize log service: ' + error.message);\n        }\n    }\n    async getOpenAIKey() {\n        return new Promise((resolve) => {\n            chrome.storage.sync.get(['openaiApiKey'], (result) => {\n                resolve(result.openaiApiKey);\n            });\n        });\n    }\n\n    setupMessageListener() {\n        document.addEventListener('surfboard-message', async (event) => {\n            const { message, type } = event.detail;\n            \n            if (type === 'user') {\n                try {\n                    // Show thinking state\n                    this.sidebar.addMessage('Thinking...', 'assistant');\n                    \n                    // Get current context\n                    const context = this.contextManager.getRelevantContext(message);\n                    \n                    // Prepare the API request\n                    const response = await fetch(this.apiEndpoint + '/chat/completions', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': `Bearer ${this.apiKey}`\n                        },\n                        body: JSON.stringify({\n                            model: this.model,\n                            messages: [\n                                {\n                                    role: 'system',\n                                    content: `You are Surfboard AI, a WaveMaker development assistant. Current context: ${JSON.stringify(context)}`\n                                },\n                                {\n                                    role: 'user',\n                                    content: message\n                                }\n                            ],\n                            temperature: 0.7,\n                            max_tokens: 2000\n                        })\n                    });\n\n                    // const response = await fetch(this.apiEndpoint, {\n                    //     method: 'POST',\n                    //     headers: {\n                    //         'Content-Type': 'application/json',\n                    //     },\n                    //     body: JSON.stringify({\n                    //         \"query\": message,\n                    //     })\n                    // });\n\n                    if (!response.ok) {\n                        throw new Error('API request failed');\n                    }\n\n                    const data = await response.json();\n                    const reply = data.choices[0].message.content;\n                    // const reply = data.answer;\n\n                    // Remove thinking message\n                    this.sidebar.chatContainer.lastChild.remove();\n                    \n                    // Add AI response\n                    this.sidebar.addMessage(reply, 'assistant');\n                } catch (error) {\n                    console.error('Failed to process message:', error);\n                    this.sidebar.addMessage(\n                        'Sorry, I encountered an error while processing your message. Please try again.',\n                        'assistant'\n                    );\n                }\n            }\n        });\n    }\n\n    async loadConfiguration() {\n        // Load API key from storage\n        return new Promise((resolve) => {\n            chrome.storage.sync.get(['groqApiKey'], (result) => {\n                resolve(result.groqApiKey);\n            });\n        });\n    }\n}\n\n// Initialize on page load\nwindow.addEventListener('load', () => {\n    copilotInstance = new SurfboardAI();\n});\n\n// Export for use in other modules\nexport default SurfboardAI;\n"],
  "mappings": "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",
  "names": ["line", "logContent", "container"]
}
