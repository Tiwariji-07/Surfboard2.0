{
  "version": 3,
  "sources": ["parser/wmParser.js", "context/wmContext.js", "ui/sidebar.js", "content.js"],
  "sourcesContent": ["/**\n * WaveMaker Markup Parser\n * Specialized parser for WaveMaker's custom markup and bindings\n */\n\nclass WMParser {\n    constructor() {\n        this.bindingPatterns = {\n            variable: /Variables\\.[^.\\s}]+(\\.dataSet)?/g,\n            widget: /Widgets\\.[^.\\s}]+/g,\n            binding: /bind:([^\"'\\s}]+)/g\n        };\n\n        this.widgetCategories = {\n            form: ['form-field', 'liveform', 'form-action'],\n            layout: ['layoutgrid', 'gridrow', 'gridcolumn'],\n            input: ['text', 'select', 'radioset', 'checkboxset', 'date', 'number'],\n            container: ['page', 'content', 'container', 'composite'],\n            navigation: ['wizard', 'wizardstep'],\n            data: ['list', 'table', 'card', 'search'],\n            display: ['label', 'message']\n        };\n    }\n\n    /**\n     * Parse WaveMaker markup and extract structure\n     * @param {string} markup - HTML string containing WaveMaker markup\n     * @returns {Object} Parsed structure with widgets, bindings, and relationships\n     */\n    parseMarkup(markup) {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(markup, 'text/html');\n        return this.parseElement(doc.body.firstElementChild);\n    }\n\n    /**\n     * Parse individual WM element\n     * @param {Element} element - DOM element to parse\n     * @returns {Object} Parsed element structure\n     */\n    parseElement(element) {\n        if (!element) return null;\n\n        const structure = {\n            type: element.tagName.toLowerCase(),\n            name: element.getAttribute('name') || '',\n            category: this.getWidgetCategory(element),\n            attributes: this.parseAttributes(element),\n            bindings: this.extractBindings(element),\n            children: [],\n            relationships: this.findRelationships(element)\n        };\n\n        // Parse children\n        for (const child of element.children) {\n            const parsedChild = this.parseElement(child);\n            if (parsedChild) {\n                structure.children.push(parsedChild);\n            }\n        }\n\n        return structure;\n    }\n\n    /**\n     * Parse element attributes\n     * @param {Element} element - DOM element\n     * @returns {Object} Parsed attributes with bindings\n     */\n    parseAttributes(element) {\n        const attrs = {};\n        for (const attr of element.attributes) {\n            attrs[attr.name] = {\n                value: attr.value,\n                hasBinding: attr.value.includes('bind:'),\n                bindings: this.extractBindingsFromValue(attr.value)\n            };\n        }\n        return attrs;\n    }\n\n    /**\n     * Extract all bindings from an element\n     * @param {Element} element - DOM element\n     * @returns {Object} Extracted bindings categorized by type\n     */\n    extractBindings(element) {\n        const html = element.outerHTML;\n        return {\n            variables: [...new Set(html.match(this.bindingPatterns.variable) || [])],\n            widgets: [...new Set(html.match(this.bindingPatterns.widget) || [])],\n            direct: [...new Set(html.match(this.bindingPatterns.binding) || [])].map(b => b.replace('bind:', ''))\n        };\n    }\n\n    /**\n     * Extract bindings from a single value\n     * @param {string} value - Attribute value\n     * @returns {Array} Extracted bindings\n     */\n    extractBindingsFromValue(value) {\n        const bindings = [];\n        if (value.includes('bind:')) {\n            const bindingValue = value.replace('bind:', '');\n            bindings.push({\n                type: 'direct',\n                value: bindingValue,\n                dependencies: this.extractDependencies(bindingValue)\n            });\n        }\n        return bindings;\n    }\n\n    /**\n     * Extract dependencies from a binding expression\n     * @param {string} expression - Binding expression\n     * @returns {Object} Extracted dependencies\n     */\n    extractDependencies(expression) {\n        return {\n            variables: [...new Set(expression.match(this.bindingPatterns.variable) || [])],\n            widgets: [...new Set(expression.match(this.bindingPatterns.widget) || [])]\n        };\n    }\n\n    /**\n     * Get widget category based on element type\n     * @param {Element} element - DOM element\n     * @returns {string} Widget category\n     */\n    getWidgetCategory(element) {\n        const tag = element.tagName.toLowerCase();\n        if (!tag.startsWith('wm-')) return 'other';\n\n        const widgetType = tag.substring(3);\n        for (const [category, types] of Object.entries(this.widgetCategories)) {\n            if (types.some(t => widgetType.includes(t))) {\n                return category;\n            }\n        }\n        return 'other';\n    }\n\n    /**\n     * Find relationships with other widgets\n     * @param {Element} element - DOM element\n     * @returns {Object} Related widgets and their relationships\n     */\n    findRelationships(element) {\n        const relationships = {\n            parent: null,\n            siblings: [],\n            dataSource: null,\n            eventHandlers: []\n        };\n\n        // Find parent relationship\n        if (element.parentElement && element.parentElement.hasAttribute('name')) {\n            relationships.parent = {\n                name: element.parentElement.getAttribute('name'),\n                type: element.parentElement.tagName.toLowerCase()\n            };\n        }\n\n        // Find data source relationships\n        const dataset = element.getAttribute('dataset');\n        if (dataset) {\n            relationships.dataSource = this.extractBindingsFromValue(dataset);\n        }\n\n        // Find event handlers\n        for (const attr of element.attributes) {\n            if (attr.name.startsWith('on-')) {\n                relationships.eventHandlers.push({\n                    event: attr.name.replace('on-', ''),\n                    handler: attr.value\n                });\n            }\n        }\n\n        return relationships;\n    }\n}\n\n// Export for use in other modules\nexport default WMParser;\n", "/**\n * WaveMaker Context Manager\n * Manages and analyzes the current WaveMaker development context\n */\n\nimport WMParser from '../parser/wmParser.js';\n\nclass WMContextManager {\n    constructor() {\n        this.parser = new WMParser();\n        this.currentContext = {\n            page: null,\n            widgets: new Map(),\n            variables: new Map(),\n            bindings: new Map(),\n            activeWidget: null\n        };\n\n        this.observers = new Set();\n    }\n\n    /**\n     * Initialize context manager and start observing DOM changes\n     */\n    async initialize() {\n        this.setupMutationObserver();\n        await this.analyzeCurrentPage();\n        console.log('Context Manager initialized');\n    }\n\n    /**\n     * Set up mutation observer to track DOM changes\n     */\n    setupMutationObserver() {\n        const observer = new MutationObserver((mutations) => {\n            for (const mutation of mutations) {\n                if (this.isWaveMakerChange(mutation)) {\n                    this.handleDOMChange(mutation);\n                }\n            }\n        });\n\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true,\n            attributes: true,\n            attributeFilter: ['class', 'style', 'data-*']\n        });\n    }\n\n    /**\n     * Check if mutation is related to WaveMaker\n     * @param {MutationRecord} mutation - DOM mutation record\n     * @returns {boolean} True if WaveMaker-related change\n     */\n    isWaveMakerChange(mutation) {\n        const target = mutation.target;\n        return target.tagName && (\n            target.tagName.toLowerCase().startsWith('wm-') ||\n            target.hasAttribute('widget-id') ||\n            target.classList.contains('wm-app')\n        );\n    }\n\n    /**\n     * Handle DOM changes\n     * @param {MutationRecord} mutation - DOM mutation record\n     */\n    async handleDOMChange(mutation) {\n        const target = mutation.target;\n        if (target.tagName && target.tagName.toLowerCase().startsWith('wm-')) {\n            const parsedElement = this.parser.parseElement(target);\n            this.updateContext(parsedElement);\n        }\n    }\n\n    /**\n     * Analyze current page structure\n     */\n    async analyzeCurrentPage() {\n        const pageElement = document.querySelector('wm-page');\n        if (!pageElement) return;\n\n        const pageStructure = this.parser.parseElement(pageElement);\n        this.currentContext.page = {\n            name: pageElement.getAttribute('name'),\n            structure: pageStructure,\n            timestamp: Date.now()\n        };\n\n        this.extractPageComponents(pageStructure);\n    }\n\n    /**\n     * Extract and categorize page components\n     * @param {Object} pageStructure - Parsed page structure\n     */\n    extractPageComponents(pageStructure) {\n        const traverse = (node) => {\n            if (node.name) {\n                // Store widget information\n                this.currentContext.widgets.set(node.name, {\n                    type: node.type,\n                    category: node.category,\n                    bindings: node.bindings,\n                    relationships: node.relationships\n                });\n\n                // Extract and store variables\n                if (node.bindings.variables.length > 0) {\n                    node.bindings.variables.forEach(variable => {\n                        if (!this.currentContext.variables.has(variable)) {\n                            this.currentContext.variables.set(variable, {\n                                usedBy: new Set([node.name]),\n                                type: this.inferVariableType(variable)\n                            });\n                        } else {\n                            this.currentContext.variables.get(variable).usedBy.add(node.name);\n                        }\n                    });\n                }\n\n                // Store binding relationships\n                node.bindings.direct.forEach(binding => {\n                    this.currentContext.bindings.set(`${node.name}:${binding}`, {\n                        widget: node.name,\n                        expression: binding,\n                        dependencies: this.parser.extractDependencies(binding)\n                    });\n                });\n            }\n\n            // Recursively process children\n            node.children.forEach(traverse);\n        };\n\n        traverse(pageStructure);\n    }\n\n    /**\n     * Infer variable type from usage\n     * @param {string} variable - Variable name\n     * @returns {string} Inferred type\n     */\n    inferVariableType(variable) {\n        if (variable.includes('.dataSet')) return 'dataset';\n        if (variable.startsWith('Variables.static')) return 'static';\n        if (variable.startsWith('Variables.sv')) return 'service';\n        return 'unknown';\n    }\n\n    /**\n     * Get relevant context for AI processing\n     * @param {string} query - User query\n     * @returns {Object} Relevant context\n     */\n    getRelevantContext(query) {\n        const context = {\n            activeWidget: this.currentContext.activeWidget,\n            relevantWidgets: [],\n            relevantVariables: [],\n            relevantBindings: []\n        };\n\n        // Find mentioned widgets\n        this.currentContext.widgets.forEach((widget, name) => {\n            if (this.isRelevantToQuery(query, name, widget)) {\n                context.relevantWidgets.push({\n                    name,\n                    ...widget\n                });\n            }\n        });\n\n        // Find related variables\n        this.currentContext.variables.forEach((variable, name) => {\n            if (this.isRelevantToQuery(query, name, variable)) {\n                context.relevantVariables.push({\n                    name,\n                    ...variable\n                });\n            }\n        });\n\n        // Find related bindings\n        context.relevantBindings = this.findRelatedBindings(context.relevantWidgets);\n\n        return context;\n    }\n\n    /**\n     * Check if item is relevant to query\n     * @param {string} query - User query\n     * @param {string} name - Item name\n     * @param {Object} item - Item details\n     * @returns {boolean} True if relevant\n     */\n    isRelevantToQuery(query, name, item) {\n        const queryTerms = query.toLowerCase().split(/\\s+/);\n        const itemTerms = name.toLowerCase().split(/[.-_]/);\n        \n        return queryTerms.some(term => \n            itemTerms.some(itemTerm => itemTerm.includes(term)) ||\n            item.type?.toLowerCase().includes(term) ||\n            item.category?.toLowerCase().includes(term)\n        );\n    }\n\n    /**\n     * Find bindings related to widgets\n     * @param {Array} widgets - Relevant widgets\n     * @returns {Array} Related bindings\n     */\n    findRelatedBindings(widgets) {\n        const bindings = [];\n        const widgetNames = new Set(widgets.map(w => w.name));\n\n        this.currentContext.bindings.forEach((binding, key) => {\n            if (widgetNames.has(binding.widget)) {\n                bindings.push({\n                    key,\n                    ...binding\n                });\n            }\n        });\n\n        return bindings;\n    }\n\n    /**\n     * Set active widget\n     * @param {string} widgetName - Name of active widget\n     */\n    setActiveWidget(widgetName) {\n        this.currentContext.activeWidget = this.currentContext.widgets.get(widgetName) || null;\n        this.notifyObservers();\n    }\n\n    /**\n     * Add context change observer\n     * @param {Function} callback - Observer callback\n     */\n    addObserver(callback) {\n        this.observers.add(callback);\n    }\n\n    /**\n     * Remove context change observer\n     * @param {Function} callback - Observer callback\n     */\n    removeObserver(callback) {\n        this.observers.delete(callback);\n    }\n\n    /**\n     * Notify observers of context changes\n     */\n    notifyObservers() {\n        this.observers.forEach(callback => {\n            try {\n                callback(this.currentContext);\n            } catch (error) {\n                console.error('Error in context observer:', error);\n            }\n        });\n    }\n}\n\nexport default WMContextManager;\n", "class WaveMakerCopilotSidebar {\n    constructor() {\n        this.sidebarElement = null;\n        this.chatContainer = null;\n        this.isOpen = false;\n        this.initialize();\n    }\n\n    initialize() {\n        // Create sidebar element\n        this.sidebarElement = document.createElement('div');\n        this.sidebarElement.className = 'wm-copilot-sidebar';\n        \n        // Add sidebar content\n        this.sidebarElement.innerHTML = `\n            <div class=\"sidebar-header\">\n                <h2>Surfboard AI</h2>\n                <button class=\"minimize-button\">\u2212</button>\n            </div>\n            <div class=\"sidebar-content\">\n                <div class=\"chat-container\"></div>\n                <div class=\"context-panel\"></div>\n            </div>\n            <div class=\"input-container\">\n                <textarea placeholder=\"Ask me anything...\" rows=\"1\"></textarea>\n                <button class=\"send-button\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path d=\"M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z\"/>\n                    </svg>\n                </button>\n            </div>\n        `;\n\n        // Store chat container reference\n        this.chatContainer = this.sidebarElement.querySelector('.chat-container');\n\n        // Add to document\n        document.body.appendChild(this.sidebarElement);\n\n        // Setup event listeners\n        this.setupEventListeners();\n\n        // Create and add toggle button\n        this.createToggleButton();\n    }\n\n    createToggleButton() {\n        const toggleButton = document.createElement('button');\n        toggleButton.className = 'sidebar-toggle';\n        toggleButton.innerHTML = `\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"/>\n            </svg>\n        `;\n        document.body.appendChild(toggleButton);\n\n        // Add toggle functionality\n        toggleButton.addEventListener('click', () => {\n            this.toggleSidebar();\n            toggleButton.classList.toggle('active');\n        });\n    }\n\n    setupEventListeners() {\n        // Minimize button\n        const minimizeButton = this.sidebarElement.querySelector('.minimize-button');\n        minimizeButton.addEventListener('click', () => this.toggleSidebar());\n\n        // Send button and textarea\n        const sendButton = this.sidebarElement.querySelector('.send-button');\n        const textarea = this.sidebarElement.querySelector('textarea');\n        \n        const sendMessage = () => {\n            const message = textarea.value.trim();\n            if (message) {\n                this.addMessage(message, 'user');\n                textarea.value = '';\n                textarea.style.height = 'auto';\n                \n                // Emit custom event for content script to handle\n                const event = new CustomEvent('surfboard-message', { \n                    detail: { message, type: 'user' }\n                });\n                document.dispatchEvent(event);\n            }\n        };\n\n        // Send button click\n        sendButton.addEventListener('click', sendMessage);\n\n        // Send on Enter (but Shift+Enter for new line)\n        textarea.addEventListener('keydown', (event) => {\n            if (event.key === 'Enter' && !event.shiftKey) {\n                event.preventDefault();\n                sendMessage();\n            }\n        });\n\n        // Auto-resize textarea\n        textarea.addEventListener('input', () => {\n            textarea.style.height = 'auto';\n            textarea.style.height = Math.min(textarea.scrollHeight, 200) + 'px';\n        });\n\n        // Keyboard shortcuts\n        document.addEventListener('keydown', (e) => {\n            if (e.ctrlKey && e.key === '\\\\') {\n                this.toggleSidebar();\n            }\n        });\n    }\n\n    toggleSidebar() {\n        this.isOpen = !this.isOpen;\n        this.sidebarElement.classList.toggle('open');\n        \n        // Update minimize button text\n        const minimizeButton = this.sidebarElement.querySelector('.minimize-button');\n        minimizeButton.textContent = this.isOpen ? '\u2212' : '+';\n    }\n\n    addMessage(message, type) {\n        const messageDiv = document.createElement('div');\n        messageDiv.className = `chat-message ${type}`;\n\n        if (type === 'assistant') {\n            // Convert markdown to HTML\n            messageDiv.innerHTML = this.processMarkdown(message);\n        } else {\n            messageDiv.textContent = message;\n        }\n\n        this.chatContainer.appendChild(messageDiv);\n        this.chatContainer.scrollTop = this.chatContainer.scrollHeight;\n    }\n\n    processMarkdown(text) {\n        // Process code blocks\n        text = text.replace(/```(\\w+)?\\n([\\s\\S]+?)\\n```/g, (match, lang, code) => {\n            const codeBlock = this.createCodeBlock(code.trim(), lang);\n            const tempContainer = document.createElement('div');\n            tempContainer.appendChild(codeBlock);\n            return tempContainer.innerHTML;\n        });\n\n        // Process inline code\n        text = text.replace(/`([^`]+)`/g, '<code>$1</code>');\n\n        return text;\n    }\n\n    createCodeBlock(code, language) {\n        const codeBlock = document.createElement('div');\n        codeBlock.className = 'code-block';\n\n        // Create header\n        const header = document.createElement('div');\n        header.className = 'code-block-header';\n\n        // Add language label\n        const languageLabel = document.createElement('span');\n        languageLabel.className = 'language-label';\n        languageLabel.textContent = language || 'text';\n\n        // Create copy button\n        const copyButton = document.createElement('button');\n        copyButton.className = 'copy-button';\n        copyButton.type = 'button'; // Explicitly set button type\n        copyButton.innerHTML = `\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n                <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            <span>Copy</span>\n        `;\n\n        // Add click event listener\n        copyButton.onclick = (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            console.log('Copy button clicked');\n            \n            // Copy the code to clipboard\n            navigator.clipboard.writeText(code)\n                .then(() => {\n                    console.log('Code copied:', code);\n                    copyButton.classList.add('copied');\n                    const span = copyButton.querySelector('span');\n                    span.textContent = 'Copied!';\n                    \n                    setTimeout(() => {\n                        copyButton.classList.remove('copied');\n                        span.textContent = 'Copy';\n                    }, 2000);\n                })\n                .catch(err => {\n                    console.error('Failed to copy:', err);\n                    copyButton.classList.add('error');\n                    const span = copyButton.querySelector('span');\n                    span.textContent = 'Error!';\n                    \n                    setTimeout(() => {\n                        copyButton.classList.remove('error');\n                        span.textContent = 'Copy';\n                    }, 2000);\n                });\n        };\n\n        // Assemble header\n        header.appendChild(languageLabel);\n        header.appendChild(copyButton);\n        codeBlock.appendChild(header);\n\n        // Create code content\n        const codeContent = document.createElement('div');\n        codeContent.className = 'code-content';\n        const preElement = document.createElement('pre');\n        const codeElement = document.createElement('code');\n        codeElement.className = `language-${language || 'text'}`;\n        \n        // Set code content\n        if (window.Prism) {\n            codeElement.innerHTML = Prism.highlight(\n                code,\n                Prism.languages[language] || Prism.languages.text,\n                language || 'text'\n            );\n        } else {\n            codeElement.textContent = code;\n        }\n\n        // Assemble code block\n        preElement.appendChild(codeElement);\n        codeContent.appendChild(preElement);\n        codeBlock.appendChild(codeContent);\n\n        return codeBlock;\n    }\n\n    showError(message) {\n        const errorDiv = document.createElement('div');\n        errorDiv.className = 'error-message';\n        errorDiv.textContent = message;\n        this.sidebarElement.appendChild(errorDiv);\n\n        // Auto-remove after 5 seconds\n        setTimeout(() => {\n            errorDiv.remove();\n        }, 5000);\n    }\n\n    updateContextPanel(context) {\n        const panel = this.sidebarElement.querySelector('.context-panel');\n        \n        panel.innerHTML = `\n            <div class=\"context-section\">\n                <h3>Current Context</h3>\n                <div class=\"context-details\">\n                    ${this.formatContextDetails(context)}\n                </div>\n            </div>\n        `;\n    }\n\n    formatContextDetails(context) {\n        if (!context) return '<p>No context available</p>';\n\n        return `\n            <div class=\"context-item\">\n                <strong>Page:</strong> ${context.activePage?.name || 'N/A'}\n            </div>\n            <div class=\"context-item\">\n                <strong>Component:</strong> ${context.activeComponent?.type || 'N/A'}\n            </div>\n            <div class=\"context-item\">\n                <strong>Last Updated:</strong> ${new Date().toLocaleTimeString()}\n            </div>\n        `;\n    }\n\n    getChatContainer() {\n        return this.sidebarElement.querySelector('.chat-container');\n    }\n\n    showLoading() {\n        const loader = document.createElement('div');\n        loader.className = 'loading-spinner';\n        this.sidebarElement.appendChild(loader);\n    }\n\n    hideLoading() {\n        const loader = this.sidebarElement.querySelector('.loading-spinner');\n        if (loader) {\n            loader.remove();\n        }\n    }\n}\n\nexport default WaveMakerCopilotSidebar;\n", "/**\n * WaveMaker Copilot Content Script\n * Main entry point for the extension's content script\n */\n\n// Global instance\nlet copilotInstance = null;\n\nimport WMContextManager from './context/wmContext.js';\nimport WaveMakerCopilotSidebar from './ui/sidebar.js';\n\nclass SurfboardAI {\n    constructor() {\n        this.contextManager = new WMContextManager();\n        this.apiKey = null;\n        this.model = 'llama3-8b-8192';\n        this.apiEndpoint = 'https://api.groq.com/openai/v1';\n        this.isInitialized = false;\n        this.sidebar = null;\n        this.initialize();\n    }\n\n    async initialize() {\n        try {\n            await this.loadConfiguration();\n            this.sidebar = new WaveMakerCopilotSidebar();\n            await this.contextManager.initialize();\n            this.setupMessageListener();\n            this.isInitialized = true;\n            \n            // Add initial greeting\n            this.sidebar.addMessage(\n                \"Hello! \uD83D\uDC4B I'm your Surfboard AI assistant. I can help you with:\\n\\n\" +\n                \"- Writing and editing code\\n\" +\n                \"- Answering questions about WaveMaker\\n\" +\n                \"- Providing code examples\\n\" +\n                \"- Debugging issues\\n\\n\" +\n                \"How can I assist you today?\",\n                'assistant'\n            );\n            \n            console.log('Surfboard.AI initialized successfully');\n        } catch (error) {\n            console.error('Failed to initialize Surfboard AI:', error);\n        }\n    }\n\n    setupMessageListener() {\n        document.addEventListener('surfboard-message', async (event) => {\n            const { message, type } = event.detail;\n            \n            if (type === 'user') {\n                try {\n                    // Show thinking state\n                    this.sidebar.addMessage('Thinking...', 'assistant');\n                    \n                    // Get current context\n                    const context = this.contextManager.getRelevantContext(message);\n                    \n                    // Prepare the API request\n                    const response = await fetch(this.apiEndpoint + '/chat/completions', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': `Bearer ${this.apiKey}`\n                        },\n                        body: JSON.stringify({\n                            model: this.model,\n                            messages: [\n                                {\n                                    role: 'system',\n                                    content: `You are Surfboard AI, a WaveMaker development assistant. Current context: ${JSON.stringify(context)}`\n                                },\n                                {\n                                    role: 'user',\n                                    content: message\n                                }\n                            ],\n                            temperature: 0.7,\n                            max_tokens: 2000\n                        })\n                    });\n\n                    if (!response.ok) {\n                        throw new Error('API request failed');\n                    }\n\n                    const data = await response.json();\n                    const reply = data.choices[0].message.content;\n\n                    // Remove thinking message\n                    this.sidebar.chatContainer.lastChild.remove();\n                    \n                    // Add AI response\n                    this.sidebar.addMessage(reply, 'assistant');\n                } catch (error) {\n                    console.error('Failed to process message:', error);\n                    this.sidebar.addMessage(\n                        'Sorry, I encountered an error while processing your message. Please try again.',\n                        'assistant'\n                    );\n                }\n            }\n        });\n    }\n\n    async loadConfiguration() {\n        // Load API key from storage\n        const result = await chrome.storage.sync.get(['apiKey']);\n        this.apiKey = result.apiKey;\n        \n        if (!this.apiKey) {\n            throw new Error('API key not found');\n        }\n    }\n}\n\n// Initialize on page load\nwindow.addEventListener('load', () => {\n    copilotInstance = new SurfboardAI();\n});\n\n// Export for use in other modules\nexport default SurfboardAI;\n"],
  "mappings": "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",
  "names": []
}
