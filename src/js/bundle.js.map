{
  "version": 3,
  "sources": ["parser/wmParser.js", "context/wmContext.js", "ui/sidebar.js", "services/aiService.js", "completion/completionManager.js", "content.js"],
  "sourcesContent": ["/**\n * WaveMaker Markup Parser\n * Specialized parser for WaveMaker's custom markup and bindings\n */\n\nclass WMParser {\n    constructor() {\n        this.bindingPatterns = {\n            variable: /Variables\\.[^.\\s}]+(\\.dataSet)?/g,\n            widget: /Widgets\\.[^.\\s}]+/g,\n            binding: /bind:([^\"'\\s}]+)/g\n        };\n\n        this.widgetCategories = {\n            form: ['form-field', 'liveform', 'form-action'],\n            layout: ['layoutgrid', 'gridrow', 'gridcolumn'],\n            input: ['text', 'select', 'radioset', 'checkboxset', 'date', 'number'],\n            container: ['page', 'content', 'container', 'composite'],\n            navigation: ['wizard', 'wizardstep'],\n            data: ['list', 'table', 'card', 'search'],\n            display: ['label', 'message']\n        };\n    }\n\n    /**\n     * Parse WaveMaker markup and extract structure\n     * @param {string} markup - HTML string containing WaveMaker markup\n     * @returns {Object} Parsed structure with widgets, bindings, and relationships\n     */\n    parseMarkup(markup) {\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(markup, 'text/html');\n        return this.parseElement(doc.body.firstElementChild);\n    }\n\n    /**\n     * Parse individual WM element\n     * @param {Element} element - DOM element to parse\n     * @returns {Object} Parsed element structure\n     */\n    parseElement(element) {\n        if (!element) return null;\n\n        const structure = {\n            type: element.tagName.toLowerCase(),\n            name: element.getAttribute('name') || '',\n            category: this.getWidgetCategory(element),\n            attributes: this.parseAttributes(element),\n            bindings: this.extractBindings(element),\n            children: [],\n            relationships: this.findRelationships(element)\n        };\n\n        // Parse children\n        for (const child of element.children) {\n            const parsedChild = this.parseElement(child);\n            if (parsedChild) {\n                structure.children.push(parsedChild);\n            }\n        }\n\n        return structure;\n    }\n\n    /**\n     * Parse element attributes\n     * @param {Element} element - DOM element\n     * @returns {Object} Parsed attributes with bindings\n     */\n    parseAttributes(element) {\n        const attrs = {};\n        for (const attr of element.attributes) {\n            attrs[attr.name] = {\n                value: attr.value,\n                hasBinding: attr.value.includes('bind:'),\n                bindings: this.extractBindingsFromValue(attr.value)\n            };\n        }\n        return attrs;\n    }\n\n    /**\n     * Extract all bindings from an element\n     * @param {Element} element - DOM element\n     * @returns {Object} Extracted bindings categorized by type\n     */\n    extractBindings(element) {\n        const html = element.outerHTML;\n        return {\n            variables: [...new Set(html.match(this.bindingPatterns.variable) || [])],\n            widgets: [...new Set(html.match(this.bindingPatterns.widget) || [])],\n            direct: [...new Set(html.match(this.bindingPatterns.binding) || [])].map(b => b.replace('bind:', ''))\n        };\n    }\n\n    /**\n     * Extract bindings from a single value\n     * @param {string} value - Attribute value\n     * @returns {Array} Extracted bindings\n     */\n    extractBindingsFromValue(value) {\n        const bindings = [];\n        if (value.includes('bind:')) {\n            const bindingValue = value.replace('bind:', '');\n            bindings.push({\n                type: 'direct',\n                value: bindingValue,\n                dependencies: this.extractDependencies(bindingValue)\n            });\n        }\n        return bindings;\n    }\n\n    /**\n     * Extract dependencies from a binding expression\n     * @param {string} expression - Binding expression\n     * @returns {Object} Extracted dependencies\n     */\n    extractDependencies(expression) {\n        return {\n            variables: [...new Set(expression.match(this.bindingPatterns.variable) || [])],\n            widgets: [...new Set(expression.match(this.bindingPatterns.widget) || [])]\n        };\n    }\n\n    /**\n     * Get widget category based on element type\n     * @param {Element} element - DOM element\n     * @returns {string} Widget category\n     */\n    getWidgetCategory(element) {\n        const tag = element.tagName.toLowerCase();\n        if (!tag.startsWith('wm-')) return 'other';\n\n        const widgetType = tag.substring(3);\n        for (const [category, types] of Object.entries(this.widgetCategories)) {\n            if (types.some(t => widgetType.includes(t))) {\n                return category;\n            }\n        }\n        return 'other';\n    }\n\n    /**\n     * Find relationships with other widgets\n     * @param {Element} element - DOM element\n     * @returns {Object} Related widgets and their relationships\n     */\n    findRelationships(element) {\n        const relationships = {\n            parent: null,\n            siblings: [],\n            dataSource: null,\n            eventHandlers: []\n        };\n\n        // Find parent relationship\n        if (element.parentElement && element.parentElement.hasAttribute('name')) {\n            relationships.parent = {\n                name: element.parentElement.getAttribute('name'),\n                type: element.parentElement.tagName.toLowerCase()\n            };\n        }\n\n        // Find data source relationships\n        const dataset = element.getAttribute('dataset');\n        if (dataset) {\n            relationships.dataSource = this.extractBindingsFromValue(dataset);\n        }\n\n        // Find event handlers\n        for (const attr of element.attributes) {\n            if (attr.name.startsWith('on-')) {\n                relationships.eventHandlers.push({\n                    event: attr.name.replace('on-', ''),\n                    handler: attr.value\n                });\n            }\n        }\n\n        return relationships;\n    }\n}\n\n// Export for use in other modules\nexport default WMParser;\n", "/**\n * WaveMaker Context Manager\n * Manages and analyzes the current WaveMaker development context\n */\n\nimport WMParser from '../parser/wmParser.js';\n\nclass WMContextManager {\n    constructor() {\n        this.parser = new WMParser();\n        this.currentContext = {\n            page: null,\n            widgets: new Map(),\n            variables: new Map(),\n            bindings: new Map(),\n            activeWidget: null\n        };\n\n        this.observers = new Set();\n    }\n\n    /**\n     * Initialize context manager and start observing DOM changes\n     */\n    async initialize() {\n        this.setupMutationObserver();\n        await this.analyzeCurrentPage();\n        console.log('Context Manager initialized');\n    }\n\n    /**\n     * Set up mutation observer to track DOM changes\n     */\n    setupMutationObserver() {\n        const observer = new MutationObserver((mutations) => {\n            for (const mutation of mutations) {\n                if (this.isWaveMakerChange(mutation)) {\n                    this.handleDOMChange(mutation);\n                }\n            }\n        });\n\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true,\n            attributes: true,\n            attributeFilter: ['class', 'style', 'data-*']\n        });\n    }\n\n    /**\n     * Check if mutation is related to WaveMaker\n     * @param {MutationRecord} mutation - DOM mutation record\n     * @returns {boolean} True if WaveMaker-related change\n     */\n    isWaveMakerChange(mutation) {\n        const target = mutation.target;\n        return target.tagName && (\n            target.tagName.toLowerCase().startsWith('wm-') ||\n            target.hasAttribute('widget-id') ||\n            target.classList.contains('wm-app')\n        );\n    }\n\n    /**\n     * Handle DOM changes\n     * @param {MutationRecord} mutation - DOM mutation record\n     */\n    async handleDOMChange(mutation) {\n        const target = mutation.target;\n        if (target.tagName && target.tagName.toLowerCase().startsWith('wm-')) {\n            const parsedElement = this.parser.parseElement(target);\n            this.updateContext(parsedElement);\n        }\n    }\n\n    /**\n     * Update the current context with new element information\n     * @param {Object} parsedElement - Parsed element data\n     */\n    updateContext(parsedElement) {\n        if (!parsedElement) return;\n\n        // Update widgets map\n        if (parsedElement.type === 'widget' && parsedElement.id) {\n            this.currentContext.widgets.set(parsedElement.id, parsedElement);\n        }\n\n        // Update variables map\n        if (parsedElement.variables) {\n            parsedElement.variables.forEach(variable => {\n                this.currentContext.variables.set(variable.name, variable);\n            });\n        }\n\n        // Update bindings map\n        if (parsedElement.bindings) {\n            parsedElement.bindings.forEach(binding => {\n                this.currentContext.bindings.set(binding.id, binding);\n            });\n        }\n\n        // Update active widget if this is the currently focused element\n        if (document.activeElement === parsedElement.element) {\n            this.currentContext.activeWidget = parsedElement;\n        }\n\n        // Notify observers of context change\n        this.notifyObservers({\n            type: 'contextUpdate',\n            element: parsedElement\n        });\n    }\n\n    /**\n     * Analyze current page structure\n     */\n    async analyzeCurrentPage() {\n        const pageElement = document.querySelector('wm-page');\n        if (!pageElement) return;\n\n        const pageStructure = this.parser.parseElement(pageElement);\n        this.currentContext.page = {\n            name: pageElement.getAttribute('name'),\n            structure: pageStructure,\n            timestamp: Date.now()\n        };\n\n        this.extractPageComponents(pageStructure);\n    }\n\n    /**\n     * Extract and categorize page components\n     * @param {Object} pageStructure - Parsed page structure\n     */\n    extractPageComponents(pageStructure) {\n        const traverse = (node) => {\n            if (node.name) {\n                // Store widget information\n                this.currentContext.widgets.set(node.name, {\n                    type: node.type,\n                    category: node.category,\n                    bindings: node.bindings,\n                    relationships: node.relationships\n                });\n\n                // Extract and store variables\n                if (node.bindings.variables.length > 0) {\n                    node.bindings.variables.forEach(variable => {\n                        if (!this.currentContext.variables.has(variable)) {\n                            this.currentContext.variables.set(variable, {\n                                usedBy: new Set([node.name]),\n                                type: this.inferVariableType(variable)\n                            });\n                        } else {\n                            this.currentContext.variables.get(variable).usedBy.add(node.name);\n                        }\n                    });\n                }\n\n                // Store binding relationships\n                node.bindings.direct.forEach(binding => {\n                    this.currentContext.bindings.set(`${node.name}:${binding}`, {\n                        widget: node.name,\n                        expression: binding,\n                        dependencies: this.parser.extractDependencies(binding)\n                    });\n                });\n            }\n\n            // Recursively process children\n            node.children.forEach(traverse);\n        };\n\n        traverse(pageStructure);\n    }\n\n    /**\n     * Infer variable type from usage\n     * @param {string} variable - Variable name\n     * @returns {string} Inferred type\n     */\n    inferVariableType(variable) {\n        if (variable.includes('.dataSet')) return 'dataset';\n        if (variable.startsWith('Variables.static')) return 'static';\n        if (variable.startsWith('Variables.sv')) return 'service';\n        return 'unknown';\n    }\n\n    /**\n     * Get relevant context for AI processing\n     * @param {string} query - User query\n     * @returns {Object} Relevant context\n     */\n    getRelevantContext(query) {\n        const context = {\n            activeWidget: this.currentContext.activeWidget,\n            relevantWidgets: [],\n            relevantVariables: [],\n            relevantBindings: []\n        };\n\n        // Find mentioned widgets\n        this.currentContext.widgets.forEach((widget, name) => {\n            if (this.isRelevantToQuery(query, name, widget)) {\n                context.relevantWidgets.push({\n                    name,\n                    ...widget\n                });\n            }\n        });\n\n        // Find related variables\n        this.currentContext.variables.forEach((variable, name) => {\n            if (this.isRelevantToQuery(query, name, variable)) {\n                context.relevantVariables.push({\n                    name,\n                    ...variable\n                });\n            }\n        });\n\n        // Find related bindings\n        context.relevantBindings = this.findRelatedBindings(context.relevantWidgets);\n\n        return context;\n    }\n\n    /**\n     * Check if item is relevant to query\n     * @param {string} query - User query\n     * @param {string} name - Item name\n     * @param {Object} item - Item details\n     * @returns {boolean} True if relevant\n     */\n    isRelevantToQuery(query, name, item) {\n        const queryTerms = query.toLowerCase().split(/\\s+/);\n        const itemTerms = name.toLowerCase().split(/[.-_]/);\n        \n        return queryTerms.some(term => \n            itemTerms.some(itemTerm => itemTerm.includes(term)) ||\n            item.type?.toLowerCase().includes(term) ||\n            item.category?.toLowerCase().includes(term)\n        );\n    }\n\n    /**\n     * Find bindings related to widgets\n     * @param {Array} widgets - Relevant widgets\n     * @returns {Array} Related bindings\n     */\n    findRelatedBindings(widgets) {\n        const bindings = [];\n        const widgetNames = new Set(widgets.map(w => w.name));\n\n        this.currentContext.bindings.forEach((binding, key) => {\n            if (widgetNames.has(binding.widget)) {\n                bindings.push({\n                    key,\n                    ...binding\n                });\n            }\n        });\n\n        return bindings;\n    }\n\n    /**\n     * Set active widget\n     * @param {string} widgetName - Name of active widget\n     */\n    setActiveWidget(widgetName) {\n        this.currentContext.activeWidget = this.currentContext.widgets.get(widgetName) || null;\n        this.notifyObservers();\n    }\n\n    /**\n     * Add context change observer\n     * @param {Function} callback - Observer callback\n     */\n    addObserver(callback) {\n        this.observers.add(callback);\n    }\n\n    /**\n     * Remove context change observer\n     * @param {Function} callback - Observer callback\n     */\n    removeObserver(callback) {\n        this.observers.delete(callback);\n    }\n\n    /**\n     * Notify observers of context changes\n     */\n    notifyObservers(change) {\n        this.observers.forEach(callback => {\n            try {\n                callback(this.currentContext, change);\n            } catch (error) {\n                console.error('Error in context observer:', error);\n            }\n        });\n    }\n}\n\nexport default WMContextManager;\n", "class WaveMakerCopilotSidebar {\n    constructor() {\n        this.sidebarElement = null;\n        this.chatContainer = null;\n        this.isOpen = false;\n        this.initialize();\n    }\n\n    initialize() {\n        // Create sidebar element\n        this.sidebarElement = document.createElement('div');\n        this.sidebarElement.className = 'wm-copilot-sidebar';\n        \n        // Add sidebar content\n        this.sidebarElement.innerHTML = `\n            <div class=\"sidebar-header\">\n                <h2>Surfboard AI</h2>\n                <button class=\"minimize-button\">\u2212</button>\n            </div>\n            <div class=\"sidebar-content\">\n                <div class=\"chat-container\"></div>\n                <div class=\"context-panel\"></div>\n            </div>\n            <div class=\"input-container\">\n                <textarea placeholder=\"Ask me anything...\" rows=\"1\"></textarea>\n                <button class=\"send-button\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <path d=\"M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z\"/>\n                    </svg>\n                </button>\n            </div>\n        `;\n\n        // Store chat container reference\n        this.chatContainer = this.sidebarElement.querySelector('.chat-container');\n\n        // Add to document\n        document.body.appendChild(this.sidebarElement);\n\n        // Setup event listeners\n        this.setupEventListeners();\n\n        // Create and add toggle button\n        this.createToggleButton();\n    }\n\n    createToggleButton() {\n        const toggleButton = document.createElement('button');\n        toggleButton.className = 'sidebar-toggle';\n        toggleButton.innerHTML = `\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <path d=\"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z\"/>\n            </svg>\n        `;\n        document.body.appendChild(toggleButton);\n\n        // Add toggle functionality\n        toggleButton.addEventListener('click', () => {\n            this.toggleSidebar();\n            toggleButton.classList.toggle('active');\n        });\n    }\n\n    setupEventListeners() {\n        // Minimize button\n        const minimizeButton = this.sidebarElement.querySelector('.minimize-button');\n        minimizeButton.addEventListener('click', () => this.toggleSidebar());\n\n        // Send button and textarea\n        const sendButton = this.sidebarElement.querySelector('.send-button');\n        const textarea = this.sidebarElement.querySelector('textarea');\n        \n        const sendMessage = () => {\n            const message = textarea.value.trim();\n            if (message) {\n                this.addMessage(message, 'user');\n                textarea.value = '';\n                textarea.style.height = 'auto';\n                \n                // Emit custom event for content script to handle\n                const event = new CustomEvent('surfboard-message', { \n                    detail: { message, type: 'user' }\n                });\n                document.dispatchEvent(event);\n            }\n        };\n\n        // Send button click\n        sendButton.addEventListener('click', sendMessage);\n\n        // Send on Enter (but Shift+Enter for new line)\n        textarea.addEventListener('keydown', (event) => {\n            if (event.key === 'Enter' && !event.shiftKey) {\n                event.preventDefault();\n                sendMessage();\n            }\n        });\n\n        // Auto-resize textarea\n        textarea.addEventListener('input', () => {\n            textarea.style.height = 'auto';\n            textarea.style.height = Math.min(textarea.scrollHeight, 200) + 'px';\n        });\n\n        // Keyboard shortcuts\n        document.addEventListener('keydown', (e) => {\n            if (e.ctrlKey && e.key === '\\\\') {\n                this.toggleSidebar();\n            }\n        });\n    }\n\n    toggleSidebar() {\n        this.isOpen = !this.isOpen;\n        this.sidebarElement.classList.toggle('open');\n        \n        // Update minimize button text\n        const minimizeButton = this.sidebarElement.querySelector('.minimize-button');\n        minimizeButton.textContent = this.isOpen ? '\u2212' : '+';\n    }\n\n    addMessage(message, type) {\n        const messageDiv = document.createElement('div');\n        messageDiv.className = `chat-message ${type}`;\n\n        if (type === 'assistant') {\n            // Convert markdown to HTML\n            messageDiv.innerHTML = this.processMarkdown(message);\n        } else {\n            messageDiv.textContent = message;\n        }\n\n        this.chatContainer.appendChild(messageDiv);\n        this.chatContainer.scrollTop = this.chatContainer.scrollHeight;\n    }\n\n    processMarkdown(text) {\n        // Process code blocks\n        text = text.replace(/```(\\w+)?\\n([\\s\\S]+?)\\n```/g, (match, lang, code) => {\n            const codeBlock = this.createCodeBlock(code.trim(), lang);\n            const tempContainer = document.createElement('div');\n            tempContainer.appendChild(codeBlock);\n            return tempContainer.innerHTML;\n        });\n\n        // Process inline code\n        text = text.replace(/`([^`]+)`/g, '<code>$1</code>');\n\n        return text;\n    }\n\n    createCodeBlock(code, language) {\n        const codeBlock = document.createElement('div');\n        codeBlock.className = 'code-block';\n\n        // Create header\n        const header = document.createElement('div');\n        header.className = 'code-block-header';\n\n        // Add language label\n        const languageLabel = document.createElement('span');\n        languageLabel.className = 'language-label';\n        languageLabel.textContent = language || 'text';\n\n        // Create copy button\n        const copyButton = document.createElement('button');\n        copyButton.className = 'copy-button';\n        copyButton.type = 'button';\n        copyButton.innerHTML = `\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <rect x=\"9\" y=\"9\" width=\"13\" height=\"13\" rx=\"2\" ry=\"2\"></rect>\n                <path d=\"M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1\"></path>\n            </svg>\n            <span>Copy</span>\n        `;\n\n        console.log('Adding click handlers to button...');\n\n        // Add both click handlers for testing\n        copyButton.onclick = function(e) {\n            console.log('Copy button clicked via onclick');\n            handleCopy(e);\n        };\n\n        copyButton.addEventListener('click', function(e) {\n            console.log('Copy button clicked via addEventListener');\n            handleCopy(e);\n        });\n\n        // Separate copy handler function\n        const handleCopy = async (e) => {\n            console.log('Handling copy...');\n            e.preventDefault();\n            e.stopPropagation();\n            \n            const span = copyButton.querySelector('span');\n            \n            try {\n                console.log('Attempting to copy code:', code);\n                await navigator.clipboard.writeText(code);\n                console.log('Code copied successfully');\n                copyButton.classList.add('copied');\n                span.textContent = 'Copied!';\n            } catch (err) {\n                console.error('Failed to copy:', err);\n                copyButton.classList.add('error');\n                span.textContent = 'Error!';\n            }\n            \n            // Reset button state after delay\n            setTimeout(() => {\n                copyButton.classList.remove('copied', 'error');\n                span.textContent = 'Copy';\n            }, 2000);\n        };\n\n        // Assemble header\n        header.appendChild(languageLabel);\n        header.appendChild(copyButton);\n        codeBlock.appendChild(header);\n\n        // Create code content\n        const codeContent = document.createElement('div');\n        codeContent.className = 'code-content';\n        const preElement = document.createElement('pre');\n        const codeElement = document.createElement('code');\n        codeElement.className = `language-${language || 'text'}`;\n        \n        // Set code content\n        if (window.Prism) {\n            codeElement.innerHTML = Prism.highlight(\n                code,\n                Prism.languages[language] || Prism.languages.text,\n                language || 'text'\n            );\n        } else {\n            codeElement.textContent = code;\n        }\n\n        // Assemble code block\n        preElement.appendChild(codeElement);\n        codeContent.appendChild(preElement);\n        codeBlock.appendChild(codeContent);\n\n        return codeBlock;\n    }\n\n    showError(message) {\n        const errorDiv = document.createElement('div');\n        errorDiv.className = 'error-message';\n        errorDiv.textContent = message;\n        this.sidebarElement.appendChild(errorDiv);\n\n        // Auto-remove after 5 seconds\n        setTimeout(() => {\n            errorDiv.remove();\n        }, 5000);\n    }\n\n    updateContextPanel(context) {\n        const panel = this.sidebarElement.querySelector('.context-panel');\n        \n        panel.innerHTML = `\n            <div class=\"context-section\">\n                <h3>Current Context</h3>\n                <div class=\"context-details\">\n                    ${this.formatContextDetails(context)}\n                </div>\n            </div>\n        `;\n    }\n\n    formatContextDetails(context) {\n        if (!context) return '<p>No context available</p>';\n\n        return `\n            <div class=\"context-item\">\n                <strong>Page:</strong> ${context.activePage?.name || 'N/A'}\n            </div>\n            <div class=\"context-item\">\n                <strong>Component:</strong> ${context.activeComponent?.type || 'N/A'}\n            </div>\n            <div class=\"context-item\">\n                <strong>Last Updated:</strong> ${new Date().toLocaleTimeString()}\n            </div>\n        `;\n    }\n\n    getChatContainer() {\n        return this.sidebarElement.querySelector('.chat-container');\n    }\n\n    showLoading() {\n        const loader = document.createElement('div');\n        loader.className = 'loading-spinner';\n        this.sidebarElement.appendChild(loader);\n    }\n\n    hideLoading() {\n        const loader = this.sidebarElement.querySelector('.loading-spinner');\n        if (loader) {\n            loader.remove();\n        }\n    }\n}\n\nexport default WaveMakerCopilotSidebar;\n", "class AIService {\n    constructor() {\n        this.API_KEY = ''; // Will be set through extension settings\n        this.API_URL = 'https://api.openai.com/v1/chat/completions';\n        this.MODEL = 'gpt-3.5-turbo';\n        this.CONFIG = {\n            max_tokens: 150,\n            temperature: 0.2, // Lower temperature for more focused completions\n            top_p: 0.95,     // Slightly reduce randomness\n            presence_penalty: 0.1, // Slight penalty for repetition\n            frequency_penalty: 0.1 // Slight penalty for common tokens\n        };\n    }\n\n    setApiKey(key) {\n        this.API_KEY = key;\n    }\n\n    createPrompt(context, language) {\n        // Extract cursor position from context\n        const cursorIndex = context.indexOf('\u25BC');\n        const beforeCursor = context.substring(0, cursorIndex);\n        const afterCursor = context.substring(cursorIndex + 1);\n\n        return [\n            {\n                role: 'system',\n                content: `You are a precise code completion model for ${language}. Follow these rules:\n1. Complete the code at the cursor position (\u25BC) naturally\n2. Focus on the local context and variable names\n3. Maintain consistent style with the surrounding code\n4. Only provide the completion text, no explanations\n5. Ensure syntactic correctness\n6. Use existing variables and functions when appropriate`\n            },\n            {\n                role: 'user',\n                content: `Complete the following ${language} code at the cursor position (\u25BC). Return ONLY the completion text:\n\nBefore cursor:\n${beforeCursor}\n\u25BC\nAfter cursor:\n${afterCursor}`\n            }\n        ];\n    }\n\n    async makeAPIRequest(messages, n = 1, signal = null) {\n        if (!this.API_KEY) {\n            throw new Error('OpenAI API key not set');\n        }\n\n        try {\n            const response = await fetch(this.API_URL, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${this.API_KEY}`\n                },\n                body: JSON.stringify({\n                    model: this.MODEL,\n                    messages,\n                    ...this.CONFIG,\n                    n\n                }),\n                signal // Add abort signal to fetch request\n            });\n\n            if (!response.ok) {\n                const error = await response.json();\n                throw new Error(error.error?.message || 'API request failed');\n            }\n\n            const data = await response.json();\n            return data.choices;\n        } catch (error) {\n            console.error('API request failed:', error);\n            throw error;\n        }\n    }\n\n    async getCompletion(context, language) {\n        const messages = this.createPrompt(context, language);\n        const choices = await this.makeAPIRequest(messages, 1);\n        return choices[0].message.content.trim();\n    }\n\n    async getMultipleCompletions(context, language, n = 3, signal = null) {\n        const messages = this.createPrompt(context, language);\n        const choices = await this.makeAPIRequest(messages, n, signal);\n        return choices.map(choice => choice.message.content.trim());\n    }\n}\n\nexport default new AIService();\n", "import aiService from '../services/aiService.js';\n\nclass CompletionManager {\n    constructor() {\n        this.currentEditor = null;\n        this.editorType = null;\n        this.monacoInstance = null;\n        this.inlineDecorationIds = [];\n        this.lastInlineText = '';\n        this.isProcessingInline = false;\n        this.initializeAttempts = 0;\n        this.maxInitializeAttempts = 20; // 10 seconds total (20 * 500ms)\n        this._inlineProviderRegistered = false;\n        this.contextWindow = 5; // Number of lines to include for context\n        \n        // Configuration for inline completions\n        this.inlineConfig = {\n            debounceTime: 500,      // Increased to 500ms\n            minRequestInterval: 750, // Minimum time between requests\n            maxPendingRequests: 1    // Maximum number of pending requests\n        };\n\n        // Create debounced handlers\n        this.debouncedHandleContentChange = this.debounce(\n            this.handleContentChange.bind(this),\n            this.inlineConfig.debounceTime\n        );\n\n        // Start initialization\n        this.initialize();\n    }\n\n    debounce(func, wait) {\n        let timeout;\n        return (...args) => {\n            clearTimeout(timeout);\n            timeout = setTimeout(() => {\n                func.apply(this, args);\n            }, wait);\n        };\n    }\n\n    throttle(func, limit) {\n        let inThrottle;\n        return (...args) => {\n            if (!inThrottle) {\n                func.apply(this, args);\n                inThrottle = true;\n                setTimeout(() => inThrottle = false, limit);\n            }\n        };\n    }\n\n    initialize() {\n        console.log('CompletionManager initializing...');\n        this.injectMonacoHelper();\n        this.setupMessageListener();\n        this.setupAPIKey();\n        this.setupEditorObserver();\n        console.log('CompletionManager initialized');\n    }\n\n    setupAPIKey() {\n        // Get API key from storage\n        chrome.storage.sync.get(['openaiApiKey'], (result) => {\n            if (result.openaiApiKey) {\n                aiService.setApiKey(result.openaiApiKey);\n            }\n        });\n\n        // Listen for API key changes\n        chrome.storage.onChanged.addListener((changes) => {\n            if (changes.openaiApiKey) {\n                aiService.setApiKey(changes.openaiApiKey.newValue);\n            }\n        });\n    }\n\n    injectMonacoHelper() {\n        var s = document.createElement('script');\n        s.src = chrome.runtime.getURL('src/js/inject/monacoHelper.js');\n        s.onload = function() { this.remove(); };\n        (document.head || document.documentElement).appendChild(s);\n    }\n\n    setupMessageListener() {\n        window.addEventListener('message', (event) => {\n            if (event.source !== window) return;\n\n            const { type, data } = event.data;\n            \n            switch (type) {\n                case 'MONACO_HELPER_READY':\n                    console.log('Monaco helper ready, setting up completion provider...');\n                    // Send message to page context\n                    window.postMessage({\n                        type: 'SETUP_COMPLETION_PROVIDER',\n                        languages: ['javascript', 'typescript', 'html', 'css']\n                    }, '*');\n                    break;\n                case 'GET_EDITOR_INSTANCE_RESPONSE':\n                    console.log('Got editor instance response:', data);\n                    if (data && data.success) {\n                        this.monacoInstance = data.editor;\n                        console.log('Monaco instance set:', this.monacoInstance);\n                    }\n                    break;\n                case 'SETUP_PROVIDER_RESPONSE':\n                    console.log('Completion provider setup response:', data);\n                    if (data && data.success) {\n                        console.log('Completion provider registered successfully');\n                    } else {\n                        console.error('Failed to setup completion provider:', data?.error);\n                    }\n                    break;\n                case 'GET_INLINE_COMPLETIONS':\n                    console.log('Getting inline completions for:', data);\n                    this.handleCompletionRequest(data);\n                    break;\n            }\n        });\n    }\n\n    async handleCompletionRequest(data) {\n        // Check if we should skip this request\n        const now = Date.now();\n        if (now - this._lastRequestTime < this.inlineConfig.minRequestInterval) {\n            return;\n        }\n        this._lastRequestTime = now;\n\n        try {\n            const context = this.getContext(data);\n            if (!context) return;\n\n            // Cancel any pending request\n            if (this._pendingRequest) {\n                this._pendingRequest.abort();\n            }\n\n            // Create new request\n            const controller = new AbortController();\n            this._pendingRequest = controller;\n\n            // Get completions from AI service\n            const completions = await aiService.getMultipleCompletions(\n                context.text,\n                context.language,\n                3, // Number of completions\n                controller.signal // Pass signal separately\n            );\n            \n            // Clear pending request if this one completed\n            if (this._pendingRequest === controller) {\n                this._pendingRequest = null;\n            }\n\n            // Calculate proper range based on word position\n            const startColumn = data.wordUntil ? data.wordUntil.endColumn : data.position.column;\n            \n            // Send completions back to the editor\n            window.postMessage({\n                type: 'INLINE_COMPLETIONS_RESPONSE',\n                data: {\n                    modelId: data.modelId,\n                    items: completions.map(completion => ({\n                        text: completion,\n                        range: {\n                            startLineNumber: data.position.lineNumber,\n                            startColumn: startColumn,\n                            endLineNumber: data.position.lineNumber,\n                            endColumn: startColumn\n                        }\n                    }))\n                }\n            }, '*');\n        } catch (error) {\n            if (error.name === 'AbortError') {\n                console.log('Completion request cancelled');\n            } else {\n                console.error('Error handling completion request:', error);\n            }\n            // Send empty completions on error\n            window.postMessage({\n                type: 'INLINE_COMPLETIONS_RESPONSE',\n                data: {\n                    modelId: data.modelId,\n                    items: []\n                }\n            }, '*');\n        }\n    }\n\n    getContext(data) {\n        const { contextText, position, language, cursorOffset } = data;\n        \n        // Split the text into before and after cursor\n        const prefix = contextText.slice(0, cursorOffset);\n        const suffix = contextText.slice(cursorOffset);\n        \n        // Calculate relative cursor position\n        const lines = prefix.split('\\n');\n        const cursorLine = lines.length;\n        const cursorColumn = lines[lines.length - 1].length + 1;\n        \n        // Combine the context with cursor position marker\n        return {\n            text: `${prefix}\u25BC${suffix}`,\n            language,\n            cursorLine,\n            cursorColumn\n        };\n    }\n\n    setupEditorObserver() {\n        console.log('Setting up editor observer...');\n        // Watch for WaveMaker editor elements being added to the DOM\n        const observer = new MutationObserver((mutations) => {\n            for (const mutation of mutations) {\n                for (const node of mutation.addedNodes) {\n                    if (node.nodeType === Node.ELEMENT_NODE) {\n                        // Try all possible WaveMaker editor containers\n                        const containers = [\n                            ...node.querySelectorAll('wms-editor, .wm-code-editor, .monaco-editor'),\n                            ...(node.matches('wms-editor, .wm-code-editor, .monaco-editor') ? [node] : [])\n                        ];\n                        \n                        for (const container of containers) {\n                            console.log('Found potential editor container:', container.className || container.tagName);\n                            \n                            // For wms-editor, look inside the shadow DOM if it exists\n                            if (container.tagName.toLowerCase() === 'wms-editor' && container.shadowRoot) {\n                                const shadowEditor = container.shadowRoot.querySelector('.monaco-editor');\n                                if (shadowEditor && !shadowEditor.classList.contains('rename-box')) {\n                                    console.log('Found Monaco editor in shadow DOM');\n                                    this.setupEditorListeners(shadowEditor);\n                                }\n                                continue;\n                            }\n                            \n                            // For regular containers, look for Monaco editor directly\n                            const editor = container.matches('.monaco-editor') ? \n                                container : container.querySelector('.monaco-editor');\n                                \n                            if (editor && !editor.classList.contains('rename-box')) {\n                                console.log('Found Monaco editor');\n                                this.setupEditorListeners(editor);\n                            }\n                        }\n                    }\n                }\n            }\n        });\n\n        // Check for existing editors\n        console.log('Checking for existing editors...');\n        ['wms-editor', '.wm-code-editor', '.monaco-editor'].forEach(selector => {\n            const existingEditors = document.querySelectorAll(selector);\n            existingEditors.forEach(container => {\n                console.log('Found existing container:', selector);\n                \n                if (container.tagName.toLowerCase() === 'wms-editor' && container.shadowRoot) {\n                    const shadowEditor = container.shadowRoot.querySelector('.monaco-editor');\n                    if (shadowEditor && !shadowEditor.classList.contains('rename-box')) {\n                        console.log('Found existing Monaco editor in shadow DOM');\n                        this.setupEditorListeners(shadowEditor);\n                    }\n                } else {\n                    const editor = container.matches('.monaco-editor') ? \n                        container : container.querySelector('.monaco-editor');\n                        \n                    if (editor && !editor.classList.contains('rename-box')) {\n                        console.log('Found existing Monaco editor');\n                        this.setupEditorListeners(editor);\n                    }\n                }\n            });\n        });\n\n        observer.observe(document.body, {\n            childList: true,\n            subtree: true\n        });\n        \n        console.log('Editor observer setup complete');\n    }\n\n    setupEditorListeners(editor) {\n        if (!editor || !this.isWaveMakerEditor(editor)) {\n            console.log('Invalid editor or not a WaveMaker editor');\n            return;\n        }\n        \n        console.log('Setting up editor listeners');\n        \n        try {\n            // Find the textarea that Monaco uses for input\n            const textArea = editor.querySelector('.inputarea');\n            if (!textArea) {\n                console.log('Monaco input area not found');\n                return;\n            }\n\n            // Find the data-keybinding-context attribute which uniquely identifies the editor\n            const editorElement = editor.closest('[data-keybinding-context]');\n            if (!editorElement) {\n                console.log('Editor context not found');\n                return;\n            }\n\n            const editorId = editorElement.getAttribute('data-keybinding-context');\n            console.log('Found editor ID:', editorId);\n\n            // Use the injected helper to get editor instance\n            window.postMessage({\n                type: 'GET_EDITOR_INSTANCE',\n                editorId: editorId\n            }, '*');\n\n            this.currentEditor = editor;\n            \n            // Handle focus events\n            editor.addEventListener('focus', () => {\n                console.log('Editor focused');\n                this.setCurrentEditor(editor);\n            });\n            \n            // Handle click events\n            editor.addEventListener('click', () => {\n                this.setCurrentEditor(editor);\n            });\n            \n            // Handle content changes through the textarea\n            this.monacoInstance.onDidChangeModelContent((event) => {\n                this.debouncedHandleContentChange(event);\n            });\n\n        } catch (error) {\n            console.error('Error setting up editor listeners:', error);\n        }\n    }\n\n    handleContentChange(event) {\n        if (this.isProcessingInline || !this.monacoInstance) return;\n        \n        const position = this.monacoInstance.getPosition();\n        if (position) {\n            this.monacoInstance.trigger('inline', 'editor.action.inlineCompletion');\n        }\n    }\n\n    isWaveMakerEditor(element) {\n        if (!element) return false;\n        \n        console.log('Checking editor:', element.className);\n        \n        // Exclude rename box and other utility widgets\n        if (element.classList.contains('rename-box')) {\n            console.log('Skipping rename box widget');\n            return false;\n        }\n        \n        // Check if it's a Monaco editor with the correct classes\n        const isMonacoEditor = element.classList.contains('monaco-editor');\n        const hasCorrectTheme = element.classList.contains('vs-dark') || element.classList.contains('vs');\n        const isNotWidget = !element.hasAttribute('widgetid');\n        \n        if (isMonacoEditor && hasCorrectTheme && isNotWidget) {\n            console.log('Valid Monaco editor found');\n            return true;\n        }\n        \n        // Check if it's within a WaveMaker editor container\n        const wmContainer = element.closest('wms-editor, .wm-code-editor');\n        if (wmContainer) {\n            console.log('Found within WaveMaker container:', wmContainer.tagName || wmContainer.className);\n            return true;\n        }\n        \n        console.log('Not a valid WaveMaker editor');\n        return false;\n    }\n\n    detectEditorType(editor) {\n        if (!editor) return null;\n        \n        // Find the WaveMaker Studio editor container\n        const container = editor.closest('.wm-code-editor');\n        if (!container) return null;\n\n        // Try to get the mode from the editor's data attributes or class names\n        const editorClasses = editor.className;\n        \n        if (editorClasses.includes('html-editor') || container.getAttribute('data-mode-id') === 'html') {\n            return 'markup';\n        } else if (editorClasses.includes('css-editor') || container.getAttribute('data-mode-id') === 'css') {\n            return 'style';\n        } else if (editorClasses.includes('js-editor') || container.getAttribute('data-mode-id') === 'javascript') {\n            return 'script';\n        }\n        \n        // Fallback: try to detect from the content or file extension\n        const editorContent = editor.textContent.trim().toLowerCase();\n        if (editorContent.startsWith('<!doctype') || editorContent.includes('<html')) {\n            return 'markup';\n        } else if (editorContent.includes('{') && editorContent.includes('}') && \n                   (editorContent.includes(':') || editorContent.includes(';'))) {\n            return 'style';\n        }\n        \n        // Default to script if we can't determine\n        return 'script';\n    }\n\n    setCurrentEditor(editor) {\n        if (this.currentEditor === editor) return;\n        \n        console.log('Setting current editor:', editor);\n        this.currentEditor = editor;\n        this.editorType = this.detectEditorType(editor);\n        console.log('Editor type:', this.editorType);\n    }\n\n}\n\nexport default CompletionManager;\n", "/**\n * WaveMaker Copilot Content Script\n * Main entry point for the extension's content script\n */\n\n// Global instance\nlet copilotInstance = null;\n\nimport WMContextManager from './context/wmContext.js';\nimport WaveMakerCopilotSidebar from './ui/sidebar.js';\nimport CompletionManager from './completion/completionManager.js';\n\nclass SurfboardAI {\n    constructor() {\n        this.contextManager = new WMContextManager();\n        this.apiKey = null;\n        this.model = 'llama3-8b-8192';\n        this.apiEndpoint = 'https://api.groq.com/openai/v1';\n        this.isInitialized = false;\n        this.sidebar = null;\n        this.completionManager = null;\n        this.initialize();\n    }\n\n    async initialize() {\n        try {\n            console.log('Initializing SurfboardAI...');\n            \n            // Initialize completion manager first\n            this.completionManager = new CompletionManager();\n            console.log('CompletionManager initialized');\n            \n            // Load API key\n            await this.loadConfiguration();\n            this.sidebar = new WaveMakerCopilotSidebar();\n            await this.contextManager.initialize();\n            this.setupMessageListener();\n            this.isInitialized = true;\n            \n            // Add initial greeting\n            this.sidebar.addMessage(\n                \"Hello! \uD83D\uDC4B I'm your Surfboard AI assistant. I can help you with:\\n\\n\" +\n                \"- Writing and editing code\\n\" +\n                \"- Answering questions about WaveMaker\\n\" +\n                \"- Providing code examples\\n\" +\n                \"- Debugging issues\\n\\n\" +\n                \"How can I assist you today?\",\n                'assistant'\n            );\n            \n            console.log('Surfboard.AI initialized successfully');\n        } catch (error) {\n            console.error('Error initializing SurfboardAI:', error);\n        }\n    }\n\n    setupMessageListener() {\n        document.addEventListener('surfboard-message', async (event) => {\n            const { message, type } = event.detail;\n            \n            if (type === 'user') {\n                try {\n                    // Show thinking state\n                    this.sidebar.addMessage('Thinking...', 'assistant');\n                    \n                    // Get current context\n                    const context = this.contextManager.getRelevantContext(message);\n                    \n                    // Prepare the API request\n                    const response = await fetch(this.apiEndpoint + '/chat/completions', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': `Bearer ${this.apiKey}`\n                        },\n                        body: JSON.stringify({\n                            model: this.model,\n                            messages: [\n                                {\n                                    role: 'system',\n                                    content: `You are Surfboard AI, a WaveMaker development assistant. Current context: ${JSON.stringify(context)}`\n                                },\n                                {\n                                    role: 'user',\n                                    content: message\n                                }\n                            ],\n                            temperature: 0.7,\n                            max_tokens: 2000\n                        })\n                    });\n\n                    if (!response.ok) {\n                        throw new Error('API request failed');\n                    }\n\n                    const data = await response.json();\n                    const reply = data.choices[0].message.content;\n\n                    // Remove thinking message\n                    this.sidebar.chatContainer.lastChild.remove();\n                    \n                    // Add AI response\n                    this.sidebar.addMessage(reply, 'assistant');\n                } catch (error) {\n                    console.error('Failed to process message:', error);\n                    this.sidebar.addMessage(\n                        'Sorry, I encountered an error while processing your message. Please try again.',\n                        'assistant'\n                    );\n                }\n            }\n        });\n    }\n\n    async loadConfiguration() {\n        // Load API key from storage\n        const result = await chrome.storage.sync.get(['apiKey']);\n        this.apiKey = result.apiKey;\n        \n        if (!this.apiKey) {\n            throw new Error('API key not found');\n        }\n    }\n}\n\n// Initialize on page load\nwindow.addEventListener('load', () => {\n    copilotInstance = new SurfboardAI();\n});\n\n// Export for use in other modules\nexport default SurfboardAI;\n"],
  "mappings": "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",
  "names": []
}
